swagger: '2.0'
info:
  version: 'v1'
  title: 'Services API'
  contact:
    email: hello@overops.com
  description: |
    Main OverOps API.
    The REST API layer enables OverOps admins and users to perform and automate all actions
    provided by the OverOps UI available at https://app.overops.com (or On-premises equivalent URL) via a platform independent programmatic interface.
    A wrapper Java client API library that leverages these APIs for convenience by
    Java and Scala developers is available at https://github.com/takipi/api-client and on Maven Central.

    All calls must be authenticated using one of the following methods:
      1. Using `x-api-key` header (To generate the token, go to `Settings` --> `Account Settings` in the OverOps App). This is the recommended method.
      2. Using Basic auth with `username:password` combo.

securityDefinitions:
  basicAuth:
    type: basic
  ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - basicAuth: []
  - ApiKeyAuth: []
host: api.overops.com
basePath: /api/v1
tags:
  - name: General
    description: Fetch general information about provisioned OverOps enviroments
  - name: Events
    description: Fetch and manipulate OverOps Automated Root Cause Events and Snapshots
  - name: Views
    description: Fetch and manipulate grouping of events (i.e. Views) according to attribute sets (e.g. "uncaught exceptions", "errors from package com.acme")
  - name: Labels
    description: Fetch and manipulate events labels
  - name: Alerts
    description: Fetch and manipulate alerting rules for detecting and disseminating anomalies such as introduction of new events and regressions to different communication channels (e.g. Email, Jira, Slack, Uder defined Functions).
  - name: Timers
    description: Fetch and manipulate OverOps Timers - bottleneck detection and performance diagnosis
  - name: Publish Metrics
    description: Fetch and manipulate dynamic data exported to StatsD, which enables using a variety of third-party tools, providing control over application data from OverOps.
  - name: System Metrics
    description: Fetch system metrics
  - name: View Metrics
    description: Fetch volumetric time series data about observed code events within OverOps monitored applications filtered by server cluster, application and deployments.
  - name: Categories
    description: Fetch and manipulate grouping of views into logical categories (e.g "CI/CD", "Favorites")
  - name: UDFs
    description: Fetch and manipulate User Defined Functinos - OverOps extensions using Lambdas.
  - name: Team Management
    description: APIs related to team management of a service
  - name: Data Redaction
    description: Fetch and manipulate data redaction of PII with target environments.
  - name: Code Redaction
    description: Fetch and manipulate code filters to include / exclude 3rd party and utility classes  from OverOps analysis and data capture.
schemes:
- "https"
paths:
#General
  /services:
    get:
      tags:
        - General
      summary: "List all environments"
      description: "List all environments accessible to the calling user"
      parameters:
        - in: query
          name: name
          description: Environment key name
          type: string
      responses:
        200:
          description: List of all accessible environments to the calling user
          schema:
            type: object
            properties:
              services:
                type: array
                description: list of environment
                items:
                  $ref: "#/definitions/EnvironmentWithRole"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - General
      summary: Generate a new environment key
      description: "Defines a new environment"
      parameters:
        - in: body
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        200:
          description: New environment key properties
          schema:
            $ref: "#/definitions/EnvironmentBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}:
    get:
      tags:
        - General
      summary: "Get information about an environment"
      description: "Get information about an environment"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: Environment data
          schema:
            type: object
            properties:
              services:
                type: array
                description: Data for a single environment
                items:
                  $ref: "#/definitions/EnvironmentBasic"
    post:
      tags:
        - General
      summary: Rename an environment
      description: "Rename an environment. This call is allowed for admins only"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: name
          schema:
            properties:
              name:
                type: string
      responses:
        200:
          description: Updated environment properties
          schema:
            $ref: "#/definitions/EnvironmentBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings:
    get:
      tags:
        - General
      summary: "Get environment settings"
      description: "Get environment settings"
      parameters:
        - in: path
          name: env_id
          description:  Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/servers:
    get:
      tags:
        - General
      summary: "List servers"
      description: "List all (or just active) servers that were used to monitor applications.
        These can be either the IP/Hostname of a host or a cluster identifier. [How to name your Server](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active servers
          type: boolean
      responses:
        200:
          description: List of servers
          schema:
            properties:
              servers:
                type: array
                items:
                  $ref: "#/definitions/Server"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/applications:
    get:
      tags:
        - General
      summary: "List applications"
      description: "List all (or just active) applications that were used to monitor applications.
        These can be either an application name, an integration suite name or a specific instance. [How to name your Application](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active applications
          type: boolean
      responses:
        200:
          description: List of applications
          schema:
            properties:
              applications:
                type: array
                items:
                  $ref: "#/definitions/Application"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/deployments:
    get:
      tags:
        - General
      summary: "List deployments"
      description: "List all (or just active) deployments that were monitoring in the environment.
        These can be either the Jenkins build number, Git commit, Maven version, etc. [How to tag your deployment](https://doc.overops.com/docs/naming-your-application-server-deployment)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: active
          description: Show only active deployments
          type: boolean
      responses:
        200:
          description: List of deployments
          schema:
            properties:
              deployments:
                type: array
                items:
                  $ref: "#/definitions/Deployment"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/overops-status:
    get:
      tags:
        - General
      summary: "List agents and collectors"
      description: "Fetch OverOps live processes report"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of OverOps components status
          schema:
            type: object
            properties:
              agents:
                type: array
                items:
                  $ref: "#/definitions/Agent"
              collectors:
                type: array
                items:
                  $ref: "#/definitions/Collector"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/overops-status/agents:
    get:
      tags:
        - General
      summary: "List agents"
      description: "Fetch agents live processes report"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: connected
          description: Retrieve only processes with an attached agents
          type: string
      responses:
        200:
          description: List of agents
          schema:
            properties:
              agents:
                type: array
                items:
                  $ref: "#/definitions/Agent"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/overops-status/collectors:
    get:
      tags:
        - General
      summary: "List collectors"
      description: "Fetch collectors live processes report"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of Collectors
          schema:
            properties:
              collectors:
                type: array
                items:
                  $ref: "#/definitions/Collector"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/storage-settings:
    get:
      tags:
        - General
      summary: "Get storage settings of an environment"
      description: "In Hybrid OverOps installation, data collected from your JVMs is locally redacted for PII and encrypted using your private encryption key before it is stored in a server that resides behind your firewall. Use this API call to fetch the current settings of your storage server. Visit OverOps [Hybrid Deployment Overview](https://doc.overops.com/docs/hybrid-deployment-overview) for full information"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: Storage settings
          schema:
            $ref: "#/definitions/StorageSettings"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - General
      summary: "Set storage settings for a service"
      description: "In Hybrid OverOps installation, data collected from your JVMs is locally redacted for PII and encrypted using your private encryption key before it is stored in a server that resides behind your firewall. This API call allows you to configure your storage server as part of your Hybrid OverOps setup. Visit OverOps [Hybrid Deployment Overview](https://doc.overops.com/docs/hybrid-deployment-overview) for full information"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: storage_settings
          schema:
            $ref: "#/definitions/StorageSettings"
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/settings/advanced-settings:
    get:
      tags:
        - General
      summary: "Get advanced settings for an environment"
      description: "Get advanced settings for an environment"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: Environment advanced settings
          schema:
            $ref: "#/definitions/EnvironmentAdvancedSettings"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - General
      summary: "Set advanced settings for an environment"
      description: "Set advanced settings for an environment"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: advanced_settings
          schema:
            $ref: "#/definitions/EnvironmentAdvancedSettings"
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/settings/reliability-settings:
    get:
      tags:
        - General
      summary: "Fetch reliability settings JSON"
      description: "Fetch reliability settings JSON which defines all the thresholds and preferences for OverOps reliability tools - Grafana dashboards, Jenkins plugin, etc."
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: Reliability dashboards settings JSON
          schema:
            type: object
            properties:
              reliability_settings_json:
                type: string
                format: binary
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - General
      summary: "Upload reliability settings JSON"
      description: "Upload reliability settings JSON which defines all the thresholds and preferences for OverOps reliability tools - Grafana dashboards, Jenkins plugin, etc."
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: reliability_settings_json
          schema:
            type: object
            properties:
              reliability_settings_json:
                type: string
                format: binary
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Events
  /services/{env_id}/events/force-snapshots:
    post:
      tags:
        - Events
      summary: "Batch Force events snapshots"
      description: "Force next snapshot for multiple events"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: items
          description: list of events to force snapshot on next time when each of them occurs
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      example: 42
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}:
    get:
      tags:
        - Events
      summary: "Fetch event data"
      description: "Fetch event data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          description: Event data
          schema:
            $ref: "#/definitions/Event"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/inbox:
    post:
      tags:
        - Labels
      summary: "Move to Inbox"
      description: "Move the specified event into Inbox"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/delete:
    post:
      tags:
        - Labels
      summary: "Move to Trash"
      description: "Move the specified event into Trash"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/resolve:
    post:
      tags:
        - Labels
      summary: "Mark as resolved"
      description: "Marks the specified event as resolved"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/snapshot:
    get:
      tags:
        - Events
      summary: "Fetch event snapshot"
      description: "Fetch event snapshot.
        Fetches the last relevant snapshot for the specific filters provided.
        All filters are optional."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: similar_event_id
          type: string
          description: Event(s) added to the filter
      responses:
        200:
          description: Link to snapshot
          schema:
            type: object
            properties:
              link:
                type: string
                example: "https://app.overops.com/tale.html?event=Ux42fkaa--"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/snapshots:
    delete:
      tags:
        - Events
      summary: "Delete all event snapshots"
      description: "Removes all existing snapshots for an event. All snapshots will be permanently deleted. Event statistics will be kept."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/force-snapshot:
    post:
      tags:
        - Events
      summary: Force Event Snapshot
      description: Force snapshot for the next time the event occurs
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/events/{event_id}/actions:
    get:
      tags:
        - Events
      summary: "Fetch event actions"
      description: "Fetch event actions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: type
          description: Filter by specific type
          type: string
      responses:
        200:
          description: Event actions
          schema:
            type: array
            items:
              $ref: "#/definitions/EventAction"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Labels
  /services/{env_id}/labels:
    get:
      tags:
        - Labels
      summary: "List labels"
      description: "List all existing labels"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of labels
          schema:
            type: object
            properties:
              labels:
                type: array
                items:
                  $ref: "#/definitions/Label"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Labels
      summary: "Create new label"
      description: "Create a new label. Labels are used to tag events with custom classifications. Labels help support use cases such as classifying an event as severe / regressed, assign it to a specific developer or team (e.g prod-team-A) or any other user defined categorization."
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: label
          description: Single label
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{env_id}/events/labels:
    post:
      tags:
        - Labels
      summary: "Batch Add/Remove labels"
      description: "Append/Detach labels to/from events"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of events and label names to append/detach
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      example: 42
                    add:
                      type: array
                      items:
                        type: string
                        example: "Critical"
                    remove:
                      type: array
                      items:
                        type: string
                        example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/events/{event_id}/labels:
    post:
      tags:
        - Labels
      summary: "Add/Remove labels"
      description: "Append and remove label(s) from an event"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of label names to add / remove
          schema:
            type: object
            properties:
              add:
                type: array
                items:
                  type: string
                  example: "Critical"
              remove:
                type: array
                items:
                  type: string
                  example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Views
  /services/{env_id}/views:
    get:
      tags:
        - Views
      summary: "List views"
      description: "List views"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of views including basic info about each view.
          schema:
            type: object
            properties:
              views:
                type: array
                items:
                  $ref: "#/definitions/ViewBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Views
      summary: "Create view"
      description: "Create view"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
            $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/views/{view_id}:
    get:
      tags:
        - Views
      summary: "Get view properties"
      description: "Get full list of view properties"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          description: Full list of view properties
          schema:
            type: object
            properties:
              views:
                type: array
                items:
                  type: object
                  description: Single view full properties
                  properties:
                    id:
                      type: string
                      example: P12
                    name:
                      type: string
                      example: DB Errors
                    description:
                      type: string
                      example: This is a DB Errors View
                    shared:
                      type: boolean
                      example: false
                    admin:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    default:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: false
                    filters:
                      $ref: "#/definitions/Filter"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Views
      summary: "Edit view data"
      description: "Edit view data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
              $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Views
      summary: "Delete view"
      description: "Delete view"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/views/{view_id}/events:
    get:
      tags:
        - Views
        - Events
      summary: Fetch events details
      description: Fetch events data for a target timeframe, application / server / deployment set.
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include event volumes (e.g. number of event instances and calls into the method containing the event) in the response
      responses:
        200:
          description: Event data
          schema:
            type: object
            properties:
              events:
                type: array
                items:
                  $ref: "#/definitions/Event"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/events/stats:
    get:
      tags:
        - Views
        - Events
      summary: Fetch stats for all events in the specified view
      description: Fetch stats for a target timeframe, application / server / deployment set.
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [hits, invocations, all]
          description: return only selected stats. 'all' is default.
      responses:
        200:
          description: Event stats
          schema:
            type: object
            properties:
              events-stats:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "42"
                    stats:
                      $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/entrypoints:
    get:
      tags:
        - Views
        - Events
      summary: Fetch entry points details
      description: Fetch entry points data in a selected timeframe
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
      responses:
        200:
          description: Entry points data
          schema:
            type: object
            properties:
              entrypoints:
                type: array
                items:
                  $ref: "#/definitions/EntryPoint"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/view/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by view"
      description: "Fetch event metrics split by view"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval. **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: resolution
          type: string
          enum: [M1, M5, H1, H8]
          description: Select graph resolution (use M1/M5 for 1 point per 1/5 minutes; use H1/H8 for 1 point per 1/8 hours). **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/entrypoint/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by entry point"
      description: "Fetch event metrics split by entry point"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval. **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: resolution
          type: string
          enum: [M1, M5, H1, H8]
          description: Select graph resolution (use M1/M5 for 1 point per 1/5 minutes; use H1/H8 for 1 point per 1/8 hours). **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics split by entry point
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com/company/Main#main#([Ljava/lang/String;)V"
                    class_name:
                      type: string
                      example: "com.company.Main"
                    method_name:
                      type: string
                      example: "main"
                    method_desc:
                      type: string
                      example: "([Ljava/lang/String;)V"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EntryPointStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/metrics/event/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by event"
      description: "Fetch event metrics split by event"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval. **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: resolution
          type: string
          enum: [M1, M5, H1, H8]
          description: Select graph resolution (use M1/M5 for 1 point per 1/5 minutes; use H1/H8 for 1 point per 1/8 hours). **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: event metrics split by event
          schema:
            type: object
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/anomaly:
    post:
      tags:
        - Alerts
      summary: "Alert on anomalies"
      description: "Alert on anomalies"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: anomaly
          description: "the anomaly object"
          schema:
            type: object
            properties:
              desc:
                type: string
                example: "Description"
              timeframe:
                type: object
                properties:
                  from:
                    type: string
                    example: "2018-02-28T22:47:09.038Z"
                  to:
                    type: string
                    example: "2018-03-01T22:47:09.038Z"
                  name:
                    type: string
                    example: "Last day"
              anomaly:
                type: object
                properties:
                  periods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "1"
                        from:
                          type: string
                          example: "2018-03-01T23:10:00.000Z"
                        to:
                          type: string
                          example: "2018-03-01T24:10:00.000Z"
                  contributors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        value:
                          type: number
                          example: 42
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/history:
    get:
      tags:
        - Views
      summary: Fetch View History
      description: This call allows to get data about the creation and the last update to the view and provides information about the update initiator and timestamp.
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          description: View History
          schema:
            $ref: "#/definitions/ViewHistory"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Alerts
  /services/{env_id}/settings/alerts:
    get:
      tags:
        - Alerts
      summary: "Fetch Default Alert Settings"
      description: "Use this call to fetch default alert settings for selected environment"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of alert defaults
          schema:
            $ref: "#/definitions/AlertDefaults"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Alerts
      summary: "Update Default Alert Settings"
      description: "Use this call to update default alert settings for selected environment which will be used as initial settings for every new alert opened in this environment. "
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: alert_defaults
          description: Default alert settings
          schema:
            $ref: "#/definitions/AlertDefaults"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/alerts/servicenow/tables:
    post:
      tags:
        - Alerts
      summary: "Fetch ServiceNow Tables"
      description: "Use this call to Load ServiceNow tables associated with specific credentials"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: credentials
          description: ServiceNow Credentials
          schema:
            type: object
            properties:
              url:
                type: "string"
                example: "http://servicenow.company.com/hooks"
              user_id:
                type: "string"
                example: "admin"
              password:
                type: "string"
                example: "pa$$1"
      responses:
        200:
          description: List of ServiceNow tables
          schema:
            type: object
            properties:
              tables:
                type: array
                items:
                  type: object
                  description: Service Now Tables
                  properties:
                    label:
                      type: string
                      example: "Report Layer"
                    name:
                      type: string
                      example: "sys_report_layer"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/alerts:
    get:
      tags:
        - Alerts
      summary: "Fetch Alert settings for a View"
      description: "Fetch Alert settings for a View (Slack, Email, UDF, etc)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View ID to use (e.g. P283)
          type: string
          required: true
      responses:
        200:
          description: Alert data
          schema:
            $ref: "#/definitions/Alert"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Alerts
      summary: "Edit Alert settings of a View"
      description: "Edit Alert settings of a View"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View ID to use (e.g. P283)
          type: string
          required: true
        - in: body
          name: alert
          description: Alerts settings
          schema:
              $ref: "#/definitions/Alert"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Alerts
      summary: "Remove Alert settings"
      description: "Disables all Alert settings for a View"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View ID to use (e.g. P283)
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/alerts/test:
    post:
      tags:
        - Alerts
      summary: "Test Alert settings"
      description: "This endpoint allows to test alerts settings before applying them to a particular view"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: alert
          description: Alerts settings
          schema:
              $ref: "#/definitions/Alert"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/views/{view_id}/custom-alert:
    post:
      tags:
        - Alerts
      summary: "Send custom alert"
      description: "Send custom alert"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: view_id
          description: View ID to use (e.g. P283)
          type: string
          required: true
        - in: body
          name: alert
          description: CustomAlert
          schema:
              $ref: "#/definitions/CustomAlert"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/alerts:
    get:
      tags:
        - Alerts
      summary: "Fetch Active Alerts for an Environment"
      description: "Use this call to fetch all active alerts on current environment. admins can use the query parameter to fetch alerts which were set by other member/admin"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: email
          description: Team member email. When this parameter is used, the alerts will be fetched for the selected user.
          type: string
      responses:
        200:
          description: List of alerts in current environment, aggregated in views (alerts which were set by calling/selected user and global alerts)
          schema:
            type: object
            properties:
              alerts:
                type: array
                description: list of alerts
                items:
                  $ref: "#/definitions/ViewAlertsSummary"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Timers
  /services/{env_id}/timers:
    get:
      tags:
        - Timers
      summary: "List timers"
      description: "List all existing timers"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of timers
          schema:
            type: object
            properties:
              timers:
                type: array
                items:
                  $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Create new timer"
      description: "Create new timer"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: timer
          description: Single timer
          schema:
            $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{env_id}/timers/{timer_id}:
    get:
      tags:
        - Timers
      summary: "Get timer properties"
      description: "Get timer properties"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          description: Timer properties
          schema:
            $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Edit timer data"
      description: "Edit timer data"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single timer properties
          schema:
              $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Timers
      summary: "Delete timer"
      description: "Delete timer"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
#Publish Metrics
  /services/{env_id}/settings/publish-metrics:
    get:
      tags:
        - Publish Metrics
      summary: "Fetch Publish Metrics settings"
      description: "Use this call to fetch data about publish metrics settings, output format and the actual metrics which are currently beeing published"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: Current settings for publish metrics
          schema:
            $ref: "#/definitions/PublishMetricsSettings"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Publish Metrics
      summary: "Set Publish Metrics"
      description: "Use this call to set and customize publish metrics. Use one of the presets, or customize you tokens by setting output_format to 'custom'."
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: settings
          description: Publish metrics settings
          schema:
            $ref: "#/definitions/PublishMetricsSettings"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/settings/publish-metrics/available_formats:
    get:
      tags:
        - Publish Metrics
      summary: "Fetch Available formats"
      description: "Use this call to fetch available formats / presets, their metrics and their tokens"
      parameters:
        - in: path
          name: env_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of Available formats and metrics
          schema:
            $ref: "#/definitions/PublishMetricFormats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#System Metrics
  /services/{env_id}/metrics/system:
    get:
      tags:
        - System Metrics
      summary: "Get all metadata"
      description: "Get a list of all available system metrics"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of all system metrics' metadata
          schema:
            type: object
            properties:
              metrics:
                type: array
                items:
                  $ref: "#/definitions/SystemMetrics"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/metrics/system/{metric_name}:
    get:
      tags:
        - System Metrics
      summary: "Get a specific metric's metadata"
      description: "Fetch info about a specific metric"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: metric_name
          description: Metric name to fetch
          type: string
          required: true
      responses:
        200:
          description: The requested metric's metadata
          schema:
            $ref: "#/definitions/SystemMetrics"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{env_id}/metrics/system/{metric_name}/graph:
    get:
      tags:
        - System Metrics
      summary: Fetch metric graph/data
      description: Fetch data for a specific system metric within a target timeframe, application / server / deployment set.
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: metric_name
          description: Metric name to fetch
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval. **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: resolution
          type: string
          enum: [M1, M5, H1, H8]
          description: Select graph resolution (use M1/M5 for 1 point per 1/5 minutes; use H1/H8 for 1 point per 1/8 hours). **IMPORTANT:** either 'points' or 'resolution' parameters have to be passed. When both are passed, resolution takes precedence.
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
      responses:
        200:
          description: List of points
          schema:
            type: object
            properties:
              points:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                      description: Point acquisition time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
                      example: "2018-02-28T22:47:09.038Z"
                    value:
                      type: number
                      description: value
                      example: 3.526287896
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
#Categories
  /services/{env_id}/categories:
    get:
      tags:
        - Categories
      summary: "List categories"
      description: "List view categories"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: name
          description: Category name
          type: string
        - in: query
          name: views
          description: List views associated with each category in the response
          type: boolean
      responses:
        200:
          description: List of View Categories and their info
          schema:
            type: object
            properties:
              categories:
                type: array
                items:
                  $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Categories
      summary: "Create category (Not implemented yet)" #shall be published only when delete call is implemented
      description: "Create category (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: category
          description: category properties
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          $ref: "#/responses/TBD"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/categories/{category_id}:
    get:
      tags:
        - Categories
      summary: "Get category details (Not implemented yet)"
      description: "Get category details (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          description: Category info
          schema:
            $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
    delete:
      tags:
        - Categories
      summary: "Delete category (Not implemented yet)"
      description: "Delete category (Not implemented yet)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{env_id}/categories/{category_id}/views:
    post:
      tags:
        - Views
        - Categories
      summary: "Add view to selected category"
      description: "Add view to selected category"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
        - in: body
          description: View ID (string)
          name: view_id
          required: true
          schema:
            type: string
            example: P12
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        403:
          $ref: "#/responses/ForbiddenError"
        401:
          $ref: "#/responses/UnauthorizedError"
#UDFs
  /global-settings/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries
      description: List available UDF (User Defined Functions) libraries
      responses:
        200:
          description: UDF libraries list
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      parameters:
        - in: body
          name: udf
          schema:
            type: object
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /global-settings/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF library properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: "Remove UDF library (TBD - Not yet implemented)"
      description: "Remove UDF library (TBD - Not yet implemented)"
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries for the environment
      description: List all available UDFs (User Defined Functions) for selected environment
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: UDF libraries list
          schema:
            type: array
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body # TBD should just be an octet string of a file. will be fixed later
          name: udf
          schema:
            type: object
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          description: UDF library was successfully added
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: Remove UDF library from the environment
      description: Remove UDF library from specified environment
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
#Team Management
  /services/{env_id}/team:
    get:
      tags:
        - Team Management
      summary: "List environment team members"
      description: "List team members with access to this environment"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: query
          name: email
          description: Team member email
          type: string
      responses:
        200:
          description: List of team members
          schema:
            $ref: "#/definitions/TeamMembersFull"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Team Management
      summary: "Add new members"
      description: "Add new members"
      parameters:
          - in: path
            name: env_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembersBasic"
      responses:
        200:
          description: List of added members
          schema:
            properties:
              new_members:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      type: string
                      example: jane.doe@company.com
                    status:
                      type: string
                      example: invitation sent
                      enum: [invitation sent, already exists]
                    link:
                      type: string
                      description: Invitation link for newly invited members
                      example: https://app.overops.com/app/cst?token=abcda12345678
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Team Management
      summary: "Delete members from an environment"
      description: "Delete members from an environment. This call requires admin role"
      parameters:
          - in: path
            name: env_id
            description:  Environment ID to use (e.g. S1234)
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembersBasic"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/team/change-role:
    post:
      tags:
        - Team Management
      summary: "Edit roles"
      description: "Edit roles for selected group of users"
      parameters:
          - in: path
            name: env_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembersBasic"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
#Data Redaction
  /services/{env_id}/settings/data-redaction:
    get:
      tags:
        - Data Redaction
      summary: "List all data redactions"
      description: "List all data redactions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of data redaction
          schema:
            type: object
            properties:
              enabled:
                type: boolean
                example: true
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Data Redaction
      summary: "Enable / disable data redaction"
      description: "Enable / disable data redaction for a selected environment. This call is allowed for admins only. **IMPORTANT:** *This call affects all filters*"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          description: Data redaction filtering status (true = enabled, false = disabled)
          name: enabled
          schema:
            type: object
            properties:
              enabled:
                type: boolean
                example: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/patterns:
    get:
      tags:
        - Data Redaction
      summary: "List all regex patterns"
      description: "List all regex patterns"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of regex patterns
          schema:
            type: object
            properties:
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/patterns/{pattern}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a pattern"
      description: "Retrieve a pattern"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          description: A pattern
          schema:
            $ref: '#/definitions/Pattern'
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a pattern"
      description: "Add a RegEx pattern to be redacted. The pattern name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
        - in: body
          name: pattern
          schema:
            $ref: '#/definitions/Pattern'
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete a pattern"
      description: "Removes a pattern from the redaction list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/identifiers:
    get:
      tags:
        - Data Redaction
      summary: "List all identifiers"
      description: "List all identifiers"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of identifiers
          schema:
            type: object
            properties:
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/identifiers/{identifier}:
    get:
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary: "Retrieve an identifier"
      description: "Retrieve an identifier"
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add an identifier"
      description: "Add an identifier. The body identifier name must match the resource identifier"
      operationId: addIdentifier
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
        - name: name
          in: body
          description: Identifier object
          schema:
            type: object
            properties:
              name:
                type: string
                example: "password"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary:  "Delete identifier"
      description: "Delete identifier"
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/classes:
    get:
      tags:
        - Data Redaction
      summary: "List all classes"
      description: "List all classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/classes/{class_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a class"
      description: "Retrieve a class from the data redaction list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add a class for data redaction"
      description: "Add a class to the redaction list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
        - in: body
          description: A JSON representing a class to add for redaction
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
                example: "IPv4"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary:  "Delete a class"
      description: "Delete a class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/packages:
    get:
      tags:
        - Data Redaction
      summary: "List all packages"
      description: "List all packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of packages
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/data-redaction/packages/{package_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a package"
      description: "Retrieve a package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            type: object
            properties:
              name:
                type: string
                example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a package"
      description: "Create a package. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
        - in: body
          name: name
          schema:
            type: object
            properties:
              name:
                type: string
                example: "com.example"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete package"
      description: "Delete package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
#Code Redaction
  /services/{env_id}/settings/code-redaction:
    get:
      tags:
        - Code Redaction
      summary: "List all environment code redaction settings"
      description: "List all environment code exclusions and inclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included and excluded classes and packages
          schema:
            type: object
            properties:
              exclude:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/PackageName"
              include:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude:
    get:
      tags:
        - Code Redaction
      summary: "List all code exclusions"
      description: "List all code exclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes and packages
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Code Redaction
      summary: "Add a bulk of code exclusions"
      description: "Add a bulk of code exclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: exclusions
          description: code exclusions
          required: true
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded classes"
      description: "List all excluded classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded class"
      description: "Retrieve an excluded class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An excluded class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded packages"
      description: "List all excluded packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of excluded packages
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/exclude/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded package"
      description: "Retrieve an excluded package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An excluded package
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/PackageName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include:
    get:
      tags:
        - Code Redaction
      summary: "List all code inclusions"
      description: "List all code inclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included classes and packages
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Code Redaction
      summary: "Add a bulk of code inclusions"
      description: "Add a bulk of code inclusions"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: inclusions
          description: code inclusions
          required: true
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all included classes"
      description: "List all included classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included class"
      description: "Retrieve an included class"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An included class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the inclusion list"
      description: "Add a class to the inclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from the inclusion list"
      description: "Remove a class from the inclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all included packages"
      description: "List all included packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/code-redaction/include/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included package"
      description: "Retrieve an included package"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An included package
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the inclusion list"
      description: "Add a package to the inclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            properties:
              name:
                $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the inclusion list"
      description: "Remove a package from the inclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
# Entry points Prioritization
  /services/{env_id}/settings/entrypoints:
    get:
      tags:
        - Entry Points
      summary: "List all prioritized and deprioritized entry  points"
      description: "List all packages and classes that should be handled as prioritized or deprioritized entry points"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of prioritized and deprioritized entry point classes and packages
          schema:
            type: object
            properties:
              deprioritized:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/PackageName"
              prioritized:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/deprioritized:
    get:
      tags:
        - Entry Points
      summary: "List all deprioritized entry points"
      description: "List all classes and packages that should be set as lowest priority entry points (i.e. will be set as entry points only if no other entry points were found in the event call stack)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of deprioritized classes and packages
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Entry Points
      summary: "Add a bulk of deprioritized entry points"
      description: "Add a bulk of deprioritized entry points"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: deprioritized
          description: deprioritized entry points
          required: true
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/prioritized:
    get:
      tags:
        - Entry Points
      summary: "List all prioritized entry points"
      description: "List all packages and classes that will be set as entry points in highest priority"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of classes and packages that should be handled as preffered entry points
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Entry Points
      summary: "Add a bulk of prioritized entry points"
      description: "Add a bulk of classes and packages that should bet set as entry points in highest priority"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: body
          name: prioritized
          description: list of prioritized entry points
          required: true
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/deprioritized/classes:
    get:
      tags:
        - Entry Points
      summary: "List all classes associated with deprioritized entry points"
      description: "List all classes that should be set as lowest priority entry points (i.e. will be set as entry points only if no other entry points were found in the event call stack)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of deprioritized classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/deprioritized/classes/{class_name}:
    # get:
    #   tags:
    #     - Entry Points
    #   summary: "Fetch an deprioritized class"
    #   description: "Fetch an deprioritized class"
    #   parameters:
    #     - in: path
    #       name: env_id
    #       description: Environment ID to use (e.g. S1234)
    #       type: string
    #       required: true
    #     - in: path
    #       name: class_name
    #       type: string
    #       required: true
    #       description: Fully qualified Java class name
    #   responses:
    #     200:
    #       description: An deprioritized class
    #       schema:
    #         type: object
    #         properties:
    #           name:
    #             $ref: "#/definitions/ClassName"
    #     404:
    #       $ref: "#/responses/NotFoundError"
    #     401:
    #       $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Entry Points
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Entry Points
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/deprioritized/packages:
    get:
      tags:
        - Entry Points
      summary: "List all packages associated with deprioritized entry points"
      description: "List all packages that should be set as lowest priority entry points (i.e. will be set as entry points only if no other entry points were found in the event call stack)"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of deprioritized packages
          schema:
            type: object
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/deprioritized/packages/{package_name}:
    # get:
    #   tags:
    #     - Entry Points
    #   summary: "Retrieve an deprioritized package"
    #   description: "Retrieve an deprioritized package"
    #   parameters:
    #     - in: path
    #       name: env_id
    #       description: Environment ID to use (e.g. S1234)
    #       type: string
    #       required: true
    #     - in: path
    #       name: package_name
    #       type: string
    #       required: true
    #       description: Fully qualified Java package name
    #   responses:
    #     200:
    #       description: An deprioritized package
    #       schema:
    #         type: object
    #         properties:
    #           name:
    #             $ref: "#/definitions/PackageName"
    #     404:
    #       $ref: "#/responses/NotFoundError"
    #     401:
    #       $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Entry Points
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Entry Points
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/prioritized/classes:
    get:
      tags:
        - Entry Points
      summary: "List all prioritized entry point classes"
      description: "List all prioritized entry point classes"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of prioritized entry point classes
          schema:
            type: object
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/prioritized/classes/{class_name}:
    # get:
    #   tags:
    #     - Entry Points
    #   summary: "Retrieve a prioritized entry point class"
    #   description: "Retrieve a prioritized entry point class"
    #   parameters:
    #     - in: path
    #       name: env_id
    #       description: Environment ID to use (e.g. S1234)
    #       type: string
    #       required: true
    #     - in: path
    #       name: class_name
    #       type: string
    #       required: true
    #       description: Fully qualified Java class name
    #   responses:
    #     200:
    #       description: An included class
    #       schema:
    #         type: object
    #         properties:
    #           name:
    #             $ref: "#/definitions/ClassName"
    #     404:
    #       $ref: "#/responses/NotFoundError"
    #     401:
    #       $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Entry Points
      summary: "Add a class to the prioritized entry points list"
      description: "Add a class to the prioritized entry points list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            type: object
            properties:
              name:
                $ref: "#/definitions/ClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Entry Points
      summary: "Remove a class from the prioritized entry points list"
      description: "Remove a class from the prioritized entry points list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/prioritized/packages:
    get:
      tags:
        - Entry Points
      summary: "List all prioritized entry point packages"
      description: "List all prioritized entry point packages"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/PackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{env_id}/settings/entrypoints/prioritized/packages/{package_name}:
    # get:
    #   tags:
    #     - Entry Points
    #   summary: "Retrieve a prioritized entry points package"
    #   description: "Retrieve a prioritized entry points package"
    #   parameters:
    #     - in: path
    #       name: env_id
    #       description: Environment ID to use (e.g. S1234)
    #       type: string
    #       required: true
    #     - in: path
    #       name: package_name
    #       type: string
    #       required: true
    #       description: Fully qualified Java package name
    #   responses:
    #     200:
    #       description: prioritized entry point package
    #     404:
    #       $ref: "#/responses/NotFoundError"
    #     401:
    #       $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Entry Points
      summary: "Add a package to the prioritized entry points list"
      description: "Add a package to the prioritized entry points list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            properties:
              name:
                $ref: "#/definitions/PackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Entry Points
      summary: "Remove a package from the prioritized entry points list"
      description: "Remove a package from the prioritized entry points list"
      parameters:
        - in: path
          name: env_id
          description: Environment ID to use (e.g. S1234)
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
definitions:
  Pattern:
    description: A data redaction pattern used to define PII RegEx
    type: object
    properties:
      name:
        type: string
        example: "Visa"
      category:
        type: string
        example: "Credit Card"
      regex:
        type: string
        example: "\\b4\\d{3}([\\-\\ ]?)(?:\\d{4}\\1){2}\\d(?:\\d{3})?\\b"
      is_active:
        type: boolean
        example: true
  ClassName:
    type: string
    example: "com.company.ClassName"
  PackageName:
    type: string
    example: "com.company.package.name"
  ViewBasic:
    type: object
    properties:
      id:
        type: string
        example: P12
      name:
        type: string
        example: DB Errors
      shared:
        type: boolean
        example: false
      admin:
        type: boolean
        description: Indicates that this view can be created and accessed by environment admins only.
        example: true
  ViewFull:
    type: object
    description: Single view full properties
    properties:
      name:
        type: string
        example: DB Errors
      description:
        type: string
        example: This is a DB Errors View
      shared:
        type: boolean
        example: false
      admin:
        type: boolean
        description: Indicates that this view is accessible to environment admins only.
        example: true
      default:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: false
      filters:
        $ref: "#/definitions/Filter"
  Category:
    type: object
    description: Single category properties
    properties:
      id:
        type: string
        example: B345
      name:
        type: string
        description: Category Name
        example: CI/CD
      shared:
        type: boolean
        description: Indicates whether this category is visible for all users under this key or only for the category creator.
        example: false
      admin:
        type: boolean
        description: (TBD - NOT YET IMPLEMENTED) marks the category as visible only to key admins
        example: true
      icon:
        type: string
        description: (TBD - NOT YET IMPLEMENTED) based 64 encoded SVG
      views:
        type: array
        items:
          $ref: "#/definitions/ViewBasic"
  Filter:
    description: Filter properties
    type: object
    properties:
      first_seen:
        type: object
        description: Defines the first time an event occured using a absolute time frame or a relative ime frame. If absolute time frame is defined, the relative will be ignored.
        properties:
          absolute:
            type: object
            properties:
              from:
                type: string
                description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
                example: "2018-02-28T22:47:09.038+02:00"
              to:
                type: string
                description: End time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
                example: "2018-02-28T22:47:09.038+02:00"
          relative:
            type: string
            enum: [last_hour, last_3h, last_6h, last_12h, last_24h, last_48h, last_7d, last_14d, last_30d]
            example: "last_6h"
      labels:
        type: array
        description: List of labels
        items:
          type: string
          example: Jira
      event_type:
        type: array
        description: List of event types
        items:
          type: string
          enum: [Uncaught Exceptions, Caught Exceptions, Swallowed Exceptions, Logged Warnings, Logged Errors, HTTP Errors, Timers]
          example: Swallowed Exceptions
      event_name:
        type: array
        description: List of event names
        items:
          type: string
          example: IndexOutOfBoundsException
      event_location:
        type: array
        description: (Not implemented yet) List of event locations
        items:
          type: string
          example: DotConnect
      event_package:
        type: array
        description: List of event packages
        items:
          type: string
          example: com.dotmarketing.servlets
      entry_point:
        type: array
        description: (Not implemented yet) List of entry points
        items:
          type: string
      servers:
        type: array
        description: List of server names
        items:
          type: string
          example: na-dotCMS-2
      apps:
        type: array
        description: List of application names
        items:
          type: string
          example: API
      deployments:
        type: array
        description: List of deployment names
        items:
          type: string
          example: "2018-04-11-2"
      introduced_by:
        type: array
        description: Filters events by deployment they originated in
        items:
          type: string
          example: Unnamed Deployment
      search:
        type: string
        description: Free text search
  Event:
    description: An exception, logged error and more
    type: object
    properties:
      id:
        type: string
        example: "1"
      summary:
        type: string
        example: "NullPointerException in Main.main"
      type:
        type: string
        example: "Uncaught Exception"
      name:
        type: string
        example: "NullPointerException"
      message:
        type: string
        example: "Error checking is-customer for null."
      first_seen:
        type: string
        example: "2018-02-28T22:47:09.038Z"
      introduced_by:
        type: string
        example: "1.201.1"
      labels:
        type: array
        items:
          type: string
          example: "Critical"
      similar_event_ids:
        type: array
        items:
          type: string
          example: "K2"
      jira_issue_url:
        type: "string"
        example: "https://example.atlassian.net/browse/EX-103"
      error_location:
        $ref: "#/definitions/CodeLocation"
      entry_point:
        $ref: "#/definitions/CodeLocation"
      error_origin:
        $ref: "#/definitions/CodeLocation"
      stats:
        $ref: "#/definitions/EventStats"
      stack_frames:
        type: array
        items:
          $ref: "#/definitions/CodeLocation"
  EventStats:
    type: object
    properties:
      hits:
        type: integer
        example: 42
      invocations:
        type: integer
        example: 51929
  EntryPoint:
    type: object
    properties:
      name:
        type: string
        example: com/company/Main#main#([Ljava/lang/String;)V
      class_name:
        type: string
        example: "com/company/Main"
      method_name:
        type: string
        example: "main"
      method_desc:
        type: string
        example: "([Ljava/lang/String;)V"
      stats:
        $ref: "#/definitions/EntryPointStats"
  EntryPointStats:
    type: object
    properties:
      invocations:
        type: integer
        example: 42
      avg_time:
        type: number
        description: Average entry point running time (in ms)
        example: 925.7
      total_time:
        type: number
        description: Entry point running time (in ms)
        example: 9345
      avg_time_std_deviation:
        type: number
        description: Standard deviation of entry point running time (in ms)
        example: 130
  Label:
    type: object
    properties:
      name:
        type: string
        example: HighPriority
      type:
        type: string
        enum:
          - DEFAULT
          - USER
        example: USER
      color:
        type: string
        example: RED
      created_on:
        type: string
        description: Label creation time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
      created_by:
        type: string
        description: View creator
        example: John Doe
  Server:
    type: object
    properties:
      name:
        type: string
        example: ip57-110-0-18
      active:
        type: boolean
        example: true
      first_seen:
        type: string
        description: Indicates the time when the server was first detected by OverOps
        example: "2018-02-28T22:47:09.038Z"
      last_seen:
        type: string
        description: The last time when the server was seen by OverOps
        example: "2018-03-01T08:08:08.001Z"
  Application:
    type: object
    properties:
      name:
        type: string
        example: jobs-api
      active:
        type: boolean
        example: true
      first_seen:
        type: string
        description: Indicates the time when the application was first detected by OverOps
        example: "2018-02-28T22:47:09.038Z"
      last_seen:
        type: string
        description: The last time when the application was seen by OverOps
        example: "2018-03-01T08:08:08.001Z"
  Deployment:
    type: object
    properties:
      name:
        type: string
        example: stage1.0.4
      active:
        type: boolean
        example: true
      first_seen:
        type: string
        description: Indicates the time when the deployment was first detected by OverOps
        example: "2018-02-28T22:47:09.038Z"
      last_seen:
        type: string
        description: The last time when the deployment was seen by OverOps
        example: "2018-03-01T08:08:08.001Z"
  CodeLocation:
    description: A code location, for error location, etc
    type: object
    properties:
      prettified_name:
        type: string
        example: "Main.main"
      class_name:
        type: string
        example: "com.company.Main"
      method_name:
        type: string
        example: "main"
      method_desc:
        type: string
        example: "([Ljava/lang/String;)V"
  EventAction:
    properties:
      type:
        type: string
        example: "Label"
      action:
        type: string
        example: "Add Label"
      data:
        type: string
        example: "Critical"
      timestamp:
        type: string
        description: Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
      initiator:
        type: string
        example: "joe@example.com"
      initiator_type:
        type: string
        example: "User"
  EnvironmentWithRole:
    type: object
    description: Environment data including user's role
    properties:
      id:
        type: string
        example: S100
      name:
        type: string
        example: Pre-prod
      full_key:
        type: string
        example: S35817XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      role:
        type: string
        description: user's role in the environment
        example: admin
  EnvironmentBasic:
    type: object
    description: Basic information about a environment
    properties:
      id:
        type: string
        example: S100
      name:
        type: string
        example: Pre-prod
      full_key:
        type: string
        example: S35817XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  EnvironmentAdvancedSettings:
    type: object
    description: Advanced settings for an environment
    properties:
      allowed_ips:
        type: array
        description: Limit access to a list of selected IPs
        items:
          type: string
          example: "127.0.0.1"
      show_rethrows:
        type: boolean
        description: Show exception rethrows in the dashboard
        example: true
      show_log_links:
        type: boolean
        description: Enable log links for exceptions (requires JVM restart, supported in version 4.9.0 or above)
        example: false
      clear_env_filters:
        type: boolean
        description: Clear servers, applications and deployments filters when moving between views
        example: false
      enhanced_decompilation:
        type: boolean
        description: Enable enhanced decompilation (This will use raw bytecode but won't store it)
        example: true
  TeamMembersBasic:
    description: List of environment team members
    type: array
    items:
      type: object
      properties:
        email:
          type: string
          example: jane.doe@company.com
        role:
          type: string
          description: owner / admin / member / viewer
          example: admin
  TeamMembersFull:
    description: List of environment team members
    type: array
    items:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        email:
          type: string
          example: jane.doe@company.com
        role:
          type: string
          description: owner / admin / member / viewer
          example: admin
        state:
          type: string
          description: active / pending invitation
          example: "pending invitation"
        link:
          type: string
          description: Invitation link for newly invited members (pending invitation status)
          example: https://app.overops.com/app/cst?token=abcda12345678
  StorageSettings:
    type: object
    properties:
      type:
        type: string
        enum:
          - HYBRID
          - HOSTED
        example: HYBRID
      hostname:
        description: Relevant for hybrid storage only. Both hostname and ip may be used. For cloud storage, NA value will be returned
        type: string
        example: storage.company.com
      frontend_hostname:
        description: OPTIONAL Relevant for hybrid storage only. Both hostname and ip may be used. For cloud storage, NA value will be returned
        type: string
        example: 123.91.12.100
  UDFLibrary:
    description: UDF Properties
    type: object
    properties:
      id:
        type: string
        example: L34
      version:
        type: string
        example: 1.0
      backward_compatible:
        type: string
        example: true
      functions:
        type: array
        items:
          $ref: "#/definitions/UDF"
  UDF:
    type: object
    properties:
      function_type:
        type: string
        example: ANOMALY
      short_description: #this is the udf name
        type: string
        example: Relative Threshold
      long_description:
        type: string
        example: This function compares the volume of events against an absolute threshold
      param_type:
        type: string
        example: TEXT
      default_params:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              example: X
            default_value:
              type: string
              example: 100
  Timer:
    description: Timer properties
    type: object
    properties:
      id:
        type: string
        description: This is an auto generated ID. When creating/editing a timer, the value recevied in this field will be ignored.
        example: "34"
      class_name:
        type: string
        example: DBManager
      method_name:
        type: string
        example: SaveWithRetries
      threshold:
        type: integer
        description: Threshold in ms
        example: 8000
      servers:
        type: array
        items:
          type: string
          example: na-dotCMS-2
      applications:
        type: array
        items:
          type: string
          example: MyApp
  Agent:
    description: Agent properties
    type: object
    properties:
      server:
        type: string
        description: name of the server that hosts the agent
        example: ip-10-164-178-61
      application:
        type: string
        description: application name
        example: prod-api
      deployment:
        type: string
        description: deployment name
        example: v4.0.2041
      id:
        type: string
        description: Agent unique identifier
        example: 12345
      version:
        type: string
        description: Agent version
        example: 4.18.1
      type:
        type: string
        description: Agent type (Java / .NET)
        example: Java
      collector_id:
        type: string
        description: unique identifier of the collector that the agent is connected to
        example: 12121
      start_time:
        type: string
        description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
      status:
        type: string
        description: OverOps monitoring status
        example: monitoring
  Collector:
    description: Collector properties
    type: object
    properties:
      id:
        type: string
        description: Collector unique identifier
        example: 12121
      pid:
        type: string
        description: PID
        example: 20187
      name:
        type: string
      version:
        type: string
        description: Collector version
        example: 4.18.1
      start_time:
        type: string
        description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
  ViewHistory:
    type: object
    properties:
      created_on:
        type: string
        description: View creation time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038+02:00"
      creation_method:
        type: string
        enum: [manual,api]
        description: View creation method
        example: manual
      created_by:
        type: string
        description: View creator
        example: John Doe
      updated_on:
        type: string
        description: View update time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-05-01T10:00:00.020+03:00"
      update_method:
        type: string
        enum: [manual,api]
        description: View update method
        example: manual
      updated_by:
        type: string
        description: updated by
        example: John Doe
  Alert:
    description: All alert settings of a view
    type: object
    properties:
      global:
        type: boolean
        description: Marks the alert as a global alert, i.e. will affect all users that share this view. Only admins will be able to edit these alerts.
        example: false
      alert_on_new:
        type: boolean
        example: true
      alert_on_anomaly:
        type: boolean
        example: true
      periodic_udf_settings:
        properties:
          library_id:
            type: "string"
            example: "L6"
          function_id:
            type: "string"
            example: "Relative Threshold"
          args:
            type: "string"
            example: "# Defines a target threshold that if the volume of events within the views exceeds will constitute an anomaly.\nthreshold = 100\n\n# A percentage value between 1 and 100 against which the volume of events / throughput is compared.\nrate = 5\n\n# Compare the number of times application threads (e.g. Servlet, Actor, Future,..) containing the events matching the target views have executed  against the number of events occurring. For example, if a Servlet containing the events within the view was invoked a 1000 times and 20 events matching the view’s filter took place, a RATE value above 2 will invoke an alert.\nrelative_to = Thread_Calls\n\n# Compare the number of times the application method containing the events was invoked against the number of events which occurred.\n# relative_to = Method_Calls\n\n# Time period to look at, in minutes.\ntimespan = 60"
          summary:
            type: "string"
            example: "Threshold(100,5.00% of Thread_Calls)"
          period_minutes:
            type: "number"
            example: 60
      slack_settings:
        properties:
          enabled:
            type: boolean
            example: true
          inhook_url:
            type: "string"
            example: "https://hooks.slack.com/services/xxxxyyyyy/xxxx/sdf123rskfsdf1j"
        type: "object"
      hip_chat_settings:
        properties:
          enabled:
            type: boolean
            example: false
          token:
            type: "string"
            example: "dfgdk2342kljsldfjslk2342fsdfkjslkj"
          room:
            type: "string"
            example: "Takipi"
        type: "object"
      pager_duty_settings:
        properties:
          enabled:
            type: boolean
            example: false
          service_integration_key:
            type: "string"
            example: "sflk234lkdjflsj12o8312"
        type: "object"
      #jira_settings: <- TBD
      #  properties:
      #
      #  type: "object"
      webhook_settings:
        properties:
          enabled:
            type: boolean
            example: false
          webhook_url:
            type: "string"
            example: "http://hooks.company.com/overops1/P1/hook"
        type: "object"
      service_now_settings:
        properties:
          enabled:
            type: boolean
            example: false
          url:
            type: "string"
            example: "http://servicenow.company.com/hooks"
          user_id:
            type: "string"
            example: "admin"
          password:
            type: "string"
            example: "pa$$1"
          table:
            description: the name (internal name) of a servicenow table to be used
            type: "string"
            example: "sys_report_layer"
        type: "object"
      email_settings:
        properties:
          is_active:
            type: boolean
            example: true
          alert_me:
            type: boolean
            example: true
          alert_all_team_members:
            type: boolean
            example: false
          alert_admins:
            type: boolean
            example: true
          alert_additional_emails:
            type: boolean
            example: false
          additional_emails_to_alert:
            type: "array"
            items:
              type: string
              example: "user1@company.com"
        type: "object"
      udf_settings:
        properties:
          enabled:
            type: boolean
            example: false
          library_id:
            type: "string"
            example: "L24"
          function_id:
            type: "string"
            example: "apply-label"
          args:
            type: "string"
            example: "label=sample_label_name"
        type: "object"
  AlertDefaults:
    description: Default alert settings for an environment
    type: object
    properties:
      email:
        type: "object"
        properties:
          alert_me:
            type: boolean
            example: true
          alert_all_team_members:
            type: boolean
            example: false
          alert_additional_emails:
            type: boolean
            example: false
          additional_emails_to_alert:
            type: "array"
            items:
              type: string
              example: "user1@company.com"
      slack:
        type: "object"
        properties:
          inhook_url:
            type: "string"
            example: "https://hooks.slack.com/services/xxxxyyyyy/xxxx/sdf123rskfsdf1j"
      pager_duty:
        type: "object"
        properties:
          service_integration_key:
            type: "string"
            example: "sflk234lkdjflsj12o8312"
      service_now:
        type: "object"
        properties:
          url:
            type: "string"
            example: "http://servicenow.company.com/hooks"
          user_id:
            type: "string"
            example: "admin"
          password:
            type: "string"
            example: "pa$$1"
          table:
            description: the name (internal name) of a servicenow table to be used
            type: "string"
            example: "sys_report_layer"
      hip_chat:
        type: "object"
        properties:
          token:
            type: "string"
            example: "dfgdk2342kljsldfjslk2342fsdfkjslkj"
          room:
            type: "string"
            example: "Takipi"
      webhook:
        type: "object"
        properties:
          webhook_url:
            type: "string"
            example: "http://hooks.company.com/overops1/P1/hook"
      #jira_settings: <- TBD
      #udf_settings <- TBD
  CustomAlert:
    description: Custom Alert
    type: object
    properties:
      title:
        type: string
        example: "Logged Warning in Some.File"
      body:
        type: string
        example: "A new logged warning has been detected in Staging2! (alert added by 4 members)"
      links:
        type: array
        items:
          type: object
          properties:
            pre_link_text:
              type: string
            link_text:
              type: string
            post_link_text:
              type: string
            link:
              type: string
  ViewAlertsSummary:
    description: basic alerts info for a single view
    type: object
    properties:
      view_id:
        type: string
        description: View ID
        example: P12
      view:
        type: string
        description: View Name
        example: "API"
      categories:
        type: array
        description: Categories Names
        items:
          type: string
        example: "Applications"
      alerts:
        type: object
        properties:
          global:
            type: boolean
            description: Indicates alerts which are global, i.e. will affect all users that share this view.
            example: false
          alert_on_new:
            type: boolean
            description: Indicates alerts which are sent on new events
            example: true
          alert_on_every_entrypoint:
            type: boolean
            description: Indicates alerts which are sent for every new event regardless of it's entry point
          anomaly_alert:
            type: object
            properties:
              alert_on_anomaly:
                type: boolean
                example: true
              anomaly_function:
                $ref: "#/definitions/UDFBasic"
              period:
                type: integer
                description: The interval (in minutes) between periodic/anomaly udf invocations
                example: 3
          channels:
            type: array
            items:
              type: string
              enum: [EMAIL, SLACK, HIPCHAT, PAGERDUTY, JIRA, WEBHOOK, SERVICENOW, UDF]
              example: SLACK
          channel_function:
            $ref: "#/definitions/UDFBasic"
  UDFBasic:
    type: object
    properties:
      library_id:
        type: "string"
        example: "L8"
      function_id:
        type: "string"
        example: "Tier Routing"
      summary:
        type: string
        example: Anomaly(last 1d vs. prev 7d, Δ > 100%)"
      args:
        type: string
        example: "# Category name where tiers views will be created.\ncategory_name=tiers\n\n# Link to the full tiers list: https://git.io/fpPT0\n# Enhance it with a delimited list: A=B;C=D;E=F, where the first item is a package (e.g com.mongo), and the second is a tier (e.g MongoDB).\nnamespaces=com.sparktale.bugtale.server.common.distribute.redis=Redis;org.redisson=Redisson;com.sparktale.bugtale.server.common.distribute.guava=Guava-Cache;com.sparktale.bugtale.util.cache=Cache;com.sparktale.bugtale.server.app.dashboard.cache=Cache;com.sparktale.bugtale.server.common.stats=SQL-Stats;com.sparktale.bugtale.server.common.pds=SQL-Pds;com.sparktale.bugtale.qsql=SQL-Queue;com.sparktale.bugtale.server.services.queue.qsql=SQL-Queue;com.sparktale.bugtale.shared.backend.rdbms=SQL-Common;com.sparktale.bugtale.server.common.queue=Local-Queue;com.sparktale.bugtale.server.common.alerts=Alerts-Engine;com.sparktale.bugtale.decoding=Snapshot-Analysis;com.sparktale.bugtale.server.common.hits=Snapshot-Analysis;com.sparktale.bugtale.server.common.tailor=Snapshot-Analysis;com.sparktale.bugtale.server.analysis=Code-Analysis;com.sparktale.bugtale.server.worker.analysis=Code-Analysis;com.sparktale.bugtale.server.common.source=Code-Analysis;com.sparktale.bugtale.analyzer=Code-Analysis;com.sparktale.bugtale.decompiler=Decompiler;com.takipi.integrations.grafana=OverOps-Influx-Backend;com.sparktale.common.util=Utils;com.sparktale.bugtale.shared.backend.util=Utils"
  PublishMetricsSettings:
    type: object
    properties:
      enabled:
        type: boolean
        example: true
      hostname:
        type: string
        description: The hostname and (optional) port of your StatsD server.
        example: 127.0.0.1:8125
      output_format:
        type: string
        example: Splunk
      metrics:
        $ref: "#/definitions/Metrics"
  PublishMetricFormats:
    type: array
    items:
      type: object
      properties:
        output_format:
          type: string
          description: For customized metrics (which are different than the format defaults), use "custom" format
          example: splunk
        default_metrics:
          $ref: "#/definitions/Metrics"
  Metrics:
    type: array
    items:
      type: object
      properties:
        name:
          type: string
          description: Metric name
        pattern:
          type: string
          description: Metric token
    example:
      - name: Views
        pattern: overops_views,${viewname},${serviceid},${application},${server},${deployment}
      - name: Events
        pattern: overops_events,${serviceid},${application},${server},${deployment},${class},${method},${eventlink},${eventid},${labels},${eventtype},${eventname},${introducedby},${entrypointclass},${entrypointmethod},${firstseen},${infra},${jiraissuekey}
      - name: Entry points
        pattern: overops_entrypoints,${serviceid},${application},${server},${deployment},${entrypointclass},${entrypointmetrics}
      - name: Custom Metrics
        pattern: overops_metrics,${serviceid},${application},${server},${deployment},${metric}
      - name: System
        pattern: overops_system,${serviceid},${application},${server},${systemmetrics}
      - name: Diagnostics
        pattern: overops_jvms,${serviceid},${application},${server},${applicationpid}
  SystemMetrics:
    type: object
    properties:
      name:
        type:  string
        description: Metric name
        example: memory-metaspace-used
      display_name:
        type: string
        description: Displayed names
        example: Used Metaspace Size
      unit:
        $ref: "#/definitions/SystemMetadataUnit"
  SystemMetadataUnit:
    type: object
    properties:
      type:
        type: string
        description: unit type
        example: BYTES
        enum: [NONE, CUSTOM, TIMES, NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS, BYTES, KIBIBYTE, MEBIBYTE, GIBIBYTE]
      suffix:
        type: string
        description: singular suffix/descriptor for custom units
      plural_suffix:
        type: string
        description: plural suffix/descriptor for custom units
responses:
  OK:
    description: OK
  TBD:
    description: TBD
  UnauthorizedError:
    description: Unauthorized
  NotFoundError:
    description: Not Found
  ForbiddenError:
    description: Forbidden
  BadRequestError:
    description: Bad Request
  Conflict:
    description: Conflict
