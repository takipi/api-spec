swagger: '2.0'
info:
  version: 'v1'
  title: 'Services API'
  contact:
    email: hello@overops.com
  description: |
    Main OverOps API.

    All calls must be authenticated using one of the following methods:
      1. Using `username:password`.
      2. Using `x-api-key` header (To generate the token, go to `Settings` --> `Account Settings` in the OverOps App)

securityDefinitions:
  basicAuth:
    type: basic
  ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - basicAuth: []
  - ApiKeyAuth: []
host: api.overops.com
basePath: /api/v1
tags:
  - name: General
    description: Fetching general information about services
  - name: Team Management
    description: APIs related to team management of a service
  - name: Data Redaction
    description: Fetching and manipulating the data redaction (PII) settings of the service
  - name: Code Redaction
    description: Fetching and manipulating the 3rd party and utility classes settings.
  - name: Views
    description: Fetching information about the views
  - name: Categories
    description: Fetching information about the View Categories
  - name: View Metrics
    description: Fetching data points about views in order to plot graphs
  - name: Alerts
    description: APIs related to the alerting mechanism
  - name: Events
    description: Event data
  - name: Timers
    description: Fetching information about timers
schemes:
- "https"
paths:
  /global-settings/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries
      description: List available UDF (User Defined Functions) libraries
      responses:
        200:
          description: UDF libraries list
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      parameters:
        - in: body
          name: udf
          schema:
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          description: OK
        401:
          $ref: "#/responses/UnauthorizedError"
  /global-settings/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF library properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: "Remove UDF library (TBD - Not yet implemented)"
      description: "Remove UDF library (TBD - Not yet implemented)"
      parameters:
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: OK
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services:
    get:
      tags:
        - General
      summary: "List all services"
      description: "List all services accessible by the user"
      parameters:
        - in: query
          name: name
          description: Service key name
          type: string
      responses:
        200:
          description: List of all accessible services
          schema:
            properties:
              services:
                type: array
                description: list of services
                items:
                  $ref: "#/definitions/ServiceBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - General
      summary: Generate a new service key
      description: "Create a new service"
      parameters:
        - in: body
          name: name
          schema:
            properties:
              name:
                type: string
      responses:
        200:
          description: New service key properties
          schema:
            $ref: "#/definitions/ServiceBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}:
    get:
      tags:
        - General
      summary: "Get information about the service (Not yet implemented)"
      description: "Get information about the service (Not yet implemented)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/team:
    get:
      tags:
        - Team Management
      summary: "List team members for an environment"
      description: "List team members for an environment"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: email
          description: Team member email
          type: string
      responses:
        200:
          description: List of team members
          schema:
            $ref: "#/definitions/TeamMembers"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Team Management
      summary: "Add members to an environment"
      description: "Add new members to the environment"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembers"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Team Management
      summary: "Delete members from an environment"
      description: "Delete members from an environment. This call requires admin role"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: team_members
            description: list of team members
            schema:
              $ref: "#/definitions/TeamMembers"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/team/change-role:
    post:
      tags:
        - Team Management
      summary: "Change user role"
      description: "Change role for a selected team member. This call requires admin role."
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: body
            name: email
            description: team memebr email
            type: string
            required: true
            example: someone@somecompany.com
          - in: body
            name: role
            description: new role (member, admin)
            type: string
            required: true
            example: admin
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/settings:
    get:
      tags:
        - General
      summary: "Get service settings"
      description: "Get service settings"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/deployments:
    get:
      tags:
        - General
      summary: "List deployments"
      description: "List deployments"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: active
          description: (TBD - Not yet implemented) Show only active deployments
          type: boolean
      responses:
        200:
          description: List of deployments
          schema:
            properties:
              deployments:
                type: array
                items:
                  $ref: "#/definitions/Deployment"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/servers:
    get:
      tags:
        - General
      summary: "List servers (Not yet implemented)"
      description: "List servers (Not yet implemented)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: active
          description: Show only active servers
          type: boolean
      responses:
        200:
          description: TBD
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/applications:
    get:
      tags:
        - General
      summary: "List applications (Not yet implemented)"
      description: "List applications (Not yet implemented)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: active
          description: Show only active applications
          type: boolean
      responses:
        200:
          $ref: "#/responses/TBD"
        401:
            $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction:
    get:
      tags:
        - Code Redaction
      summary: "List all environment code redaction"
      description: "List all environment code exclusions and inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included and excluded classes and packages
          schema:
            properties:
              exclude:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/ExcludedClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/ExcludedPackageName"
              include:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/definitions/IncludedClassName"
                  packages:
                    type: array
                    items:
                      $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude:
    get:
      tags:
        - Code Redaction
      summary: "List all code exclusions"
      description: "List all code exclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes and packages
          schema:
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ExcludedClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded classes"
      description: "List all excluded classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes
          schema:
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/ExcludedClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded class"
      description: "Retrieve an excluded class"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An excluded class
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all excluded packages"
      description: "List all excluded packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded packages
          schema:
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an excluded package"
      description: "Retrieve an excluded package"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An excluded package
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include:
    get:
      tags:
        - Code Redaction
      summary: "List all code inclusions"
      description: "List all code inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes and packages
          schema:
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/IncludedClassName"
              packages:
                type: array
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes:
    get:
      tags:
        - Code Redaction
      summary: "List all included classes"
      description: "List all included classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes
          schema:
            properties:
              classes:
                type: array
                items:
                  $ref: "#/definitions/IncludedClassName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes/{class_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included class"
      description: "Retrieve an included class"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          description: An included class
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a class to the inclusion list"
      description: "Add a class to the inclusion list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
        - in: body
          name: class
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a class from the inclusion list"
      description: "Remove a class from the inclusion list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          type: string
          required: true
          description: Fully qualified Java class name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages:
    get:
      tags:
        - Code Redaction
      summary: "List all included packages"
      description: "List all included packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties:
              packages:
                type: array
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages/{package_name}:
    get:
      tags:
        - Code Redaction
      summary: "Retrieve an included package"
      description: "Retrieve an included package"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          description: An included package
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Code Redaction
      summary: "Add a package to the inclusion list"
      description: "Add a package to the inclusion list. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
        - in: body
          name: package
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Code Redaction
      summary: "Remove a package from the inclusion list"
      description: "Remove a package from the inclusion list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          type: string
          required: true
          description: Fully qualified Java package name
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction:
    get:
      tags:
        - Data Redaction
      summary: "List all data redactions"
      description: "List all data redactions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of data redaction
          schema:
            properties:
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns:
    get:
      tags:
        - Data Redaction
      summary: "List all regex patterns"
      description: "List all regex patterns"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of regex patterns
          schema:
            properties:
              patterns:
                type: array
                items:
                  $ref: "#/definitions/Pattern"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns/{pattern}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a pattern"
      description: "Retrieve a pattern"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          description: A pattern
          schema:
            $ref: '#/definitions/Pattern'
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a pattern"
      description: "Add a RegEx pattern to be redacted. The pattern name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
        - in: body
          name: pattern
          schema:
            $ref: '#/definitions/Pattern'
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete a pattern"
      description: "Removes a pattern from the redaction list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: pattern
          description: A RegEx pattern name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers:
    get:
      tags:
        - Data Redaction
      summary: "List all identifiers"
      description: "List all identifiers"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of identifiers
          schema:
            properties:
              identifiers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers/{identifier}:
    get:
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary: "Retrieve an identifier"
      description: "Retrieve an identifier"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: string
                example: "password"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add an identifier"
      description: "Add an identifier. The body identifier name must match the resource identifier"
      operationId: addIdentifier
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
        - name: name
          in: body
          description: Identifier object
          schema:
           properties:
             name:
               type: string
               example: "password"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags:
        - Data Redaction
      summary:  "Delete identifier"
      description: "Delete identifier"
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes:
    get:
      tags:
        - Data Redaction
      summary: "List all classes"
      description: "List all classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of classes
          schema:
            properties:
              classes:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes/{class_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a class"
      description: "Retrieve a class from the data redaction list"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: string
                example: "IPv4"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Add a class for data redaction"
      description: "Add a class to the redaction list. The body class name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
        - in: body
          description: A JSON representing a class to add for redaction
          name: name
          schema:
           properties:
             name:
               type: string
               example: "IPv4"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary:  "Delete a class"
      description: "Delete a class"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: class_name
          description: Class name to redact.
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages:
    get:
      tags:
        - Data Redaction
      summary: "List all packages"
      description: "List all packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of packages
          schema:
            properties:
              packages:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages/{package_name}:
    get:
      tags:
        - Data Redaction
      summary: "Retrieve a package"
      description: "Retrieve a package"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          description: If the redaction exists
          schema:
            properties:
              name:
                type: string
                example: "com.example"
        401:
          $ref: "#/responses/UnauthorizedError"
    put:
      tags:
        - Data Redaction
      summary: "Create a package"
      description: "Create a package. The body package name must match the resource identifier"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
        - in: body
          name: name
          schema:
           properties:
             name:
               type: string
               example: "com.example"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - Data Redaction
      summary: "Delete package"
      description: "Delete package"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: package_name
          description: Fully qualified Java package name
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/categories:
    get:
      tags:
        - Categories
      summary: "List categories"
      description: "List view categories"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of View Categories and their info
          schema:
            properties:
              categories:
                type: array
                items:
                  $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Categories
      summary: "Create category (Not implemented yet)" #shall be published only when delete call is implemented
      description: "Create category (Not implemented yet)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: category
          description: category properties
          schema:
            $ref: "#/definitions/Category"
      responses:
        200:
          $ref: "#/responses/TBD"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/categories/{category_id}:
    get:
      tags:
        - Categories
      summary: "Get category details (Not implemented yet)"
      description: "Get category details (Not implemented yet)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          description: Category info
          schema:
            $ref: "#/definitions/Category"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
    delete:
      tags:
        - Categories
      summary: "Delete category (Not implemented yet)"
      description: "Delete category (Not implemented yet)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{service_id}/categories/{category_id}/views:
    post:
      tags:
        - Views
        - Categories
      summary: "Add view to selected category"
      description: "Add view to selected category"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: category_id
          description: View category to use
          type: string
          required: true
        - in: body
          description: View ID (string)
          name: view_id
          required: true
          schema:
            type: string
            example: P12
      responses:
        200:
          $ref: "#/responses/OK"
        404:
          $ref: "#/responses/NotFoundError"
        403:
          $ref: "#/responses/ForbiddenError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/views:
    get:
      tags:
        - Views
      summary: "List views"
      description: "List views"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of views including basic info about each view.
          schema:
            properties:
              views:
                type: array
                items:
                  $ref: "#/definitions/ViewBasic"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Views
      summary: "Create view"
      description: "Create view"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
            $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        409:
          $ref: "#/responses/Conflict"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/views/{view_id}:
    get:
      tags:
        - Views
        - Alerts
      summary: "Get view properties"
      description: "Get full list of view properties"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          description: Full list of view properties
          schema:
            properties:
              views:
                type: array
                items:
                  type: object
                  description: Single view full properties
                  properties:
                    id:
                      type: string
                      example: P12
                    name:
                      type: string
                      example: DB Errors
                    description:
                      type: string
                      example: This is a DB Errors View
                    shared:
                      type: boolean
                      example: false
                    admin:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    default:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: false
                    filters:
                      $ref: "#/definitions/Filter"
                    alert_on_new:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
                    alert_on_anomaly:
                      type: boolean
                      description: TBD - NOT YET IMPLEMENTED
                      example: true
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    post:
      tags:
        - Views
        - Alerts
      summary: "Edit view data"
      description: "Edit view data"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single view properties
          schema:
              $ref: "#/definitions/ViewFull"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Views
      summary: "Delete view (Not implemented yet)"
      description: "Delete view (Not implemented yet)"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
  /services/{service_id}/views/{view_id}/events:
    get:
      tags:
        - Views
        - Events
      summary: Fetch events details
      description: Fetch events data in a selected timeframe
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event data
          schema:
            properties:
              events:
                type: array
                items:
                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/views/{view_id}/entrypoints:
    get:
      tags:
        - Views
        - Events
      summary: Fetch entrypoints details
      description: Fetch entrypoints data in a selected timeframe
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
      responses:
        200:
          description: Entrypoints data
          schema:
            properties:
              entrypoints:
                type: array
                items:
                  $ref: "#/definitions/EntryPoint"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/view/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics"
      description: "Fetch event metrics"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics
          schema:
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/entrypoint/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by entrypoint"
      description: "Fetch event metrics split by entrypoint"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: Event metrics split by entry point
          schema:
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/event/graph:
    get:
      tags:
        - Views
        - View Metrics
      summary: "Fetch event metrics split by event"
      description: "Fetch event metrics split by event"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: to
          type: string
          description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
          required: true
        - in: query
          name: points
          type: integer
          description: Number of data points to return within the interval
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: stats
          type: string
          enum: [none, hits, invocations, all]
          description: Include statistics per event in the response
      responses:
        200:
          description: event metrics split by event
          schema:
            properties:
              graphs:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "event"
                    id:
                      type: string
                      example: "42"
                    points:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            example: "2018-02-28T22:47:09.038Z"
                          stats:
                            $ref: "#/definitions/EventStats"
                          contributors:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: "42"
                                stats:
                                  $ref: "#/definitions/EventStats"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/views/{view_id}/anomaly:
    post:
      tags:
        - Views
        - Alerts
      summary: "Alert on anomalies"
      description: "Alert on anomalies"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: view_id
          description: View to use
          type: string
          required: true
        - in: body
          name: anomaly
          description: "the anomaly object"
          schema:
            type: object
            properties:
              desc:
                type: string
                example: "Description"
              timeframe:
                type: object
                properties:
                  from:
                    type: string
                    example: "2018-02-28T22:47:09.038Z"
                  to:
                    type: string
                    example: "2018-03-01T22:47:09.038Z"
                  name:
                    type: string
                    example: "Last day"
              anomaly:
                type: object
                properties:
                  periods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "1"
                        from:
                          type: string
                          example: "2018-03-01T23:10:00.000Z"
                        to:
                          type: string
                          example: "2018-03-01T24:10:00.000Z"
                  contributors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 1
                        value:
                          type: number
                          example: 42
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/labels:
    get:
      tags:
        - Labels
      summary: "List labels"
      description: "List all existing labels"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of labels
          schema:
            properties:
              labels:
                type: array
                items:
                  $ref: "#/definitions/Label"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Labels
      summary: "Create new label"
      description: "Create new label"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: label
          description: Single label
          schema:
            $ref: "#/definitions/Label"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{service_id}/events/labels:
    post:
      tags:
        - Labels
      summary: "Batch Add/Remove labels"
      description: "Append/Detach labels to/from events"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of events and label names to append/detach
          schema:
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      example: 42
                    add:
                      type: array
                      items:
                        type: string
                        example: "Critical"
                    remove:
                      type: array
                      items:
                        type: string
                        example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}:
    get:
      tags:
        - Events
      summary: "Fetch event data"
      description: "Fetch event data"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          description: Event data
          schema:
            $ref: "#/definitions/Event"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/labels:
    post:
      tags:
        - Labels
      summary: "Add/Remove labels"
      description: "Append/Detach labels to/from event"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
        - in: body
          name: item
          description: list of label names to append/detach
          schema:
            type: object
            properties:
              add:
                type: array
                items:
                  type: string
                  example: "Critical"
              remove:
                type: array
                items:
                  type: string
                  example: "Low"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/inbox:
    post:
      tags:
        - Labels
      summary: "Move to Inbox"
      description: "Move the specified event into Inbox"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/delete:
    post:
      tags:
        - Labels
      summary: "Move to Trash"
      description: "Move the specified event into Trash"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/resolve:
    post:
      tags:
        - Labels
      summary: "Mark as resolved"
      description: "Marks the specified event as resolved"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: force
          description: Force adding labels, even if it exists
          type: boolean
          default: false
        - in: query
          name: handle_similar_events
          description: Change the labels on all similar events
          type: boolean
          default: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/snapshot:
    get:
      tags:
        - Events
      summary: "Fetch event snapshot"
      description: "Fetch event snapshot.
        Fetches the last relevant snapshot for the specific filters provided.
        All filters are optional."
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: from
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: to
          type: string
          description: Start time of requested events. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
          required: true
        - in: query
          name: server
          type: string
          description: Server(s) added to the filter
        - in: query
          name: app
          type: string
          description: Application(s) added to the filter
        - in: query
          name: deployment
          type: string
          description: Deployment(s) added to the filter
        - in: query
          name: similar_event_id
          type: string
          description: Event(s) added to the filter
      responses:
        200:
          description: Link to snapshot
          schema:
            type: object
            properties:
              link:
                type: string
                example: "https://app.overops.com/tale.html?event=Ux42fkaa--"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/snapshots:
    delete:
      tags:
        - Events
      summary: "Delete all event snapshots"
      description: "Removes all existing snapshots for an event. All snapshots will be permanently deleted. Event statistics will be kept."
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/events/{event_id}/force-snapshot:
    post:
      tags:
        - Events
      summary: Force Event Snapshot
      description: Force snapshot on the next time the event occurs
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/events/{event_id}/actions:
    get:
      tags:
        - Events
      summary: "Fetch event actions"
      description: "Fetch event actions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: event_id
          description: Event to use
          type: string
          required: true
        - in: query
          name: type
          description: Filter by specific type
          type: string
      responses:
        200:
          description: Event actions
          schema:
            type: array
            items:
              $ref: "#/definitions/EventAction"
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          $ref: "#/responses/NotFoundError"
  /services/{service_id}/udfs:
    get:
      tags:
        - UDFs
      summary: List available UDF libraries for a service key
      description: List all available UDFs (User Defined Functions) for selected service key
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: UDF libraries list
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - UDFs
      summary: Add a new UDF library
      description: Add a new UDF library
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: body # TBD should just be an octet string of a file. will be fixed later
          name: udf
          schema:
            properties:
              udf:
                type: string
                format: binary
      responses:
        200:
          description: UDF library was successfully added
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/udfs/{library_id}:
    get:
      tags:
        - UDFs
      summary: Get UDF library properties
      description: Get UDF (User Defined Function) library properties
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: UDF properties
          schema:
            $ref: "#/definitions/UDFLibrary"
        401:
          $ref: "#/responses/UnauthorizedError"
    delete:
      tags:
        - UDFs
      summary: Remove UDF library from a service key
      description: "Remove UDF library from specified service key"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: library_id
          description: UDF library ID to be used
          type: string
          required: true
      responses:
        200:
          description: OK
        404:
          $ref: "#/responses/NotFoundError"
        401:
          $ref: "#/responses/UnauthorizedError"
  /services/{service_id}/timers:
    get:
      tags:
        - Timers
      summary: "List timers"
      description: "List all existing timers"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of timers
          schema:
            properties:
              timers:
                type: array
                items:
                  $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Create new timer"
      description: "Create new timer"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: body
          name: timer
          description: Single timer
          schema:
            $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequestError"
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/Conflict"
  /services/{service_id}/timers/{timer_id}:
    get:
      tags:
        - Timers
      summary: "Get timer properties"
      description: "Get timer properties"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          description: Timer properties
          schema:
            $ref: "#/definitions/Timer"
        401:
          $ref: "#/responses/UnauthorizedError"
    post:
      tags:
        - Timers
      summary: "Edit timer data"
      description: "Edit timer data"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: timer_id
          description: View to use
          type: string
          required: true
        - in: body
          name: view
          description: Single timer properties
          schema:
              $ref: "#/definitions/Timer"
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
        404:
          $ref: "#/responses/NotFoundError"
    delete:
      tags:
        - Timers
      summary: "Delete timer"
      description: "Delete timer"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: timer_id
          description: Timer to use
          type: string
          required: true
      responses:
        200:
          $ref: "#/responses/OK"
        401:
          $ref: "#/responses/UnauthorizedError"
        403:
          $ref: "#/responses/ForbiddenError"
definitions:
  Pattern:
    description: A data redaction pattern used to define PII RegEx
    type: object
    properties:
      name:
        type: string
        example: "Visa"
      category:
        type: string
        example: "Credit Card"
      regex:
        type: string
        example: "\\b4\\d{3}([\\-\\ ]?)(?:\\d{4}\\1){2}\\d(?:\\d{3})?\\b"
      is_active:
        type: boolean
        example: true
  IncludedClassName:
    type: string
    example: "com.company.GoodClassName"
  IncludedPackageName:
    type: string
    example: "com.company.package.good"
  ExcludedClassName:
    type: string
    example: "com.company.BadClassName"
  ExcludedPackageName:
    type: string
    example: "com.company.package.bad"
  ViewBasic:
    type: object
    properties:
      id:
        type: string
        example: P12
      name:
        type: string
        example: DB Errors
      shared:
        type: boolean
        example: false
  ViewFull:
    type: object
    description: Single view full properties
    properties:
      name:
        type: string
        example: DB Errors
      description:
        type: string
        example: This is a DB Errors View
      shared:
        type: boolean
        example: false
      admin:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      default:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: false
      filters:
        $ref: "#/definitions/Filter"
      alert_on_new:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
      alert_on_anomaly:
        type: boolean
        description: TBD - NOT YET IMPLEMENTED
        example: true
  Category:
    type: object
    description: Single category properties
    properties:
      id:
        type: string
        example: B345
      name:
        type: string
        description: Category Name
        example: CI/CD
      shared:
        type: boolean
        description: Indicates whether this category is visible for all users under this key or only for the category creator.
        example: false
      admin:
        type: boolean
        description: (TBD - NOT YET IMPLEMENTED) marks the category as visible only to key admins
        example: true
      icon:
        type: string
        description: (TBD - NOT YET IMPLEMENTED) based 64 encoded SVG
      views:
        type: array
        items:
          $ref: "#/definitions/ViewBasic"
  Filter:
    description: Filter properties
    type: object
    properties:
      first_seen:
        type: object
        description: Defines the first time an event occured using a absolute time frame or a relative ime frame. If absolute time frame is defined, the relative will be ignored.
        properties:
          absolute:
            type: object
            properties:
              from:
                type: string
                description: Start time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
              to:
                type: string
                description: End time. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
                example: 2018-02-28T22:47:09.038+02:00
          relative:
            type: string
            enum: [last_hour, last_3h, last_6h, last_12h, last_24h, last_48h, last_7d, last_14d, last_30d]
            example: "last_6h"
      labels:
        type: array
        description: List of labels
        items:
          type: string
          example: Jira
      event_type:
        type: array
        description: List of event types
        items:
          type: string
          enum: [Uncaught Exceptions, Caught Exceptions, Swallowed Exceptions, Logged Warnings, Logged Errors, HTTP Errors, Timers]
          example: Swallowed Exceptions
      event_name:
        type: array
        description: (Not implemented yet) List of event names
        items:
          type: string
          example: IndexOutOfBoundsException
      event_location:
        type: array
        description: (Not implemented yet) List of event locations
        items:
          type: string
          example: DotConnect
      event_package:
        type: array
        description: (Not implemented yet) List of event packages
        items:
          type: string
          example: com.dotmarketing.servlets
      entry_point:
        type: array
        description: (Not implemented yet) List of entrypoints
        items:
          type: string
      servers:
        type: array
        description: (Not implemented yet) List of server names
        items:
          type: string
          example: na-dotCMS-2
      apps:
        type: array
        description: (Not implemented yet) List of application names
        items:
          type: string
          example: API
      deployments:
        type: array
        description: (Not implemented yet) List of deployment names
        items:
          type: string
          example: 2018-04-11-2
      introduced_by:
        type: array
        description: (Not implemented yet) Filters events by deployment they originated in
        items:
          type: string
          example: Unnamed Deployment
      search:
        type: string
        description: (Not implemented yet) Free text search
  Event:
    description: An exception, logged error and more
    type: object
    properties:
      id:
        type: string
        example: "1"
      summary:
        type: string
        example: "NullPointerException in Main.main"
      type:
        type: string
        example: "Uncaught Exception"
      name:
        type: string
        example: "NullPointerException"
      first_seen:
        type: string
        example: "2018-02-28T22:47:09.038Z"
      introduced_by:
        type: string
        example: "1.201.1"
      labels:
        type: array
        items:
          type: string
          example: "Critical"
      similar_event_ids:
        type: array
        items:
          type: string
          example: "K2"
      jira_issue_url:
        type: "string"
        example: "https://example.atlassian.net/browse/EX-103"
      error_location:
        $ref: "#/definitions/CodeLocation"
      entry_point:
        $ref: "#/definitions/CodeLocation"
      error_origin:
        $ref: "#/definitions/CodeLocation"
      stats:
        $ref: "#/definitions/EventStats"
  EventStats:
    type: object
    properties:
      hits:
        type: integer
        example: 42
      invocations:
        type: integer
        example: 51929
  EntryPoint:
    type: object
    properties:
      name:
        type: string
        example: LoginServlet
      stats:
        $ref: "#/definitions/EntryPointStats"
  EntryPointStats:
    type: object
    properties:
      invocations:
        type: integer
        example: 42
  Label:
    type: object
    properties:
      name:
        type: string
        example: HighPriority
      type:
        type: string
        enum:
          - DEFAULT
          - USER
        example: USER
      color: #consider adding available colors as enum
        type: string
        example: RED
  Deployment:
    type: object
    properties:
      name:
        type: string
        example: stage1.0.4
      active:
        type: boolean
        example: true
  CodeLocation:
    description: A code location, for error location, etc
    type: object
    properties:
      prettified_name:
        type: string
        example: "Main.main"
      class_name:
        type: string
        example: "com.company.Main"
      method_name:
        type: string
        example: "main"
      method_desc:
        type: string
        example: "([Ljava/lang/String;)V"
  EventAction:
    properties:
      type:
        type: string
        example: "Label"
      action:
        type: string
        example: "Add Label"
      data:
        type: string
        example: "Critical"
      timestamp:
        type: string
        description: Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ)
        example: "2018-02-28T22:47:09.038Z"
      initiator:
        type: string
        example: "joe@example.com"
      initiator_type:
        type: string
        example: "User"
  ServiceBasic:
    description: Basic information about a service key
    properties:
      id:
        type: string
        example: S100
      name:
        type: string
        example: Pre-prod
      full_key:
        type: string
        example: S35817XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  TeamMembers:
    description: List of Service key team members
    type: array
    items:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        email:
          type: string
          example: jane.doe@company.com
        role:
          type: string
          description: owner / admin / member
          example: admin
        state:
          type: string
          description: active / pending invitation
          example: active
  UDFLibrary:
    description: UDF Properties
    type: object
    properties:
      id:
        type: string
        example: L34
      version:
        type: string
        example: 1.0
      backward_compatible:
        type: string
        example: true
      functions:
        type: array
        items:
          $ref: "#/definitions/UDF"
  UDF:
    type: object
    properties:
      function_type:
        type: string
        example: ANOMALY
      short_description: #this is the udf name
        type: string
        example: Relative Threshold
      long_description:
        type: string
        example: This function compares the volume of events against an absolute threshold
      param_type:
        type: string
        example: TEXT
      default_params:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              example: X
            default_value:
              type: string
              example: 100
  Timer:
    description: Timer properties
    type: object
    properties:
      id:
        type: string
        description: This is an auto generated ID. When creating/editing a timer, the value recevied in this field will be ignored.
        example: 34
      class_name:
        type: string
        example: DBManager
      method_name:
        type: string
        example: SaveWithRetries
      threshold:
        type: integer
        description: Threshold in ms
        example: 8000
      servers:
        type: array
        items:
          type: string
          example: na-dotCMS-2
      applications:
        type: array
        items:
          type: string
          example: MyApp
responses:
  OK:
    description: OK
  TBD:
    description: TBD
  UnauthorizedError:
    description: Unauthorized
  NotFoundError:
    description: Not Found
  ForbiddenError:
    description: Forbidden
  BadRequestError:
    description: Bad Request
  Conflict:
    description: Conflict
