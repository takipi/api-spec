swagger: '2.0'
info:
  version: 'v1'
  title: 'Services API'
  contact:
    email: hello@overops.com
  description: |
    Main OverOps API.
    
    All calls must be authenticated using `username:password`.
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []
host: api.overops.com
basePath: /api/v1
tags: 
  - name: General
    description: Fetching general information about services (Not yet implemented)
  - name: Data Redaction
    description: Fetching and manipulating the data redaction (PII) settings of the service
  - name: Code Redaction
    description: Fetching and manipulating the 3rd party and utility classes settings.
  - name: Views
    description: Fetching information about the views
  - name: View Metrics
    description: Fetching data points about views in order to plot graphs
  - name: Alerts
    description: APIs related to the alerting mechanism
  - name: Events
    description: Event data
schemes:
- "https"
paths:
  /services:
    get:
      tags:
        - General
      description: "List all services"
      responses:
        200:
          description: TBD
        401:
          description: Unauthorized
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}:
    get:
      tags:
        - General
      summary: "Get information about the service"
      description: "Get information about the service"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
      responses:
        200:
          description: TBD
        401:
          description: Unauthorized
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings:
    get:
      tags:
        - General
      summary: "Get service settings"
      description: "Get service settings"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: TBD
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction:
    get:
      tags:
        - Code Redaction
      summary: "List all environment code redaction"
      description: "List all environment code exclusions and inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included and excluded classes and packages
          schema:
            properties: 
              exclude: 
                type: "object"
                properties:
                  classes:
                    type: "array"
                    items:
                      $ref: "#/definitions/ExcludedClassName"
                  packages:
                    type: "array"
                    items:
                      $ref: "#/definitions/ExcludedPackageName"
              include: 
                type: "object"
                properties:
                  classes:
                    type: "array"
                    items:
                      $ref: "#/definitions/IncludedClassName"
                  packages:
                    type: "array"
                    items:
                      $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude:
    get:
      tags: 
        - Code Redaction
      summary: "List all code exclusions"
      description: "List all code exclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes and packages
          schema:
            properties: 
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedClassName"
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes:
    get:
      tags: 
        - Code Redaction
      summary: "List all excluded classes"
      description: "List all excluded classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded classes
          schema:
            properties: 
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedClassName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
    get:
      tags: 
        - Code Redaction
      summary: "Retrieve an excluded class"
      description: "Retrieve an excluded class"
      responses:
        200:
          description: An excluded class
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Code Redaction
      summary: "Add a class to the exclusion list"
      description: "Add a class to the exclusion list. The body class name must match the resource identifier"
      parameters: 
       - in: body
         name: class
         schema:
           properties:
              name:
                $ref: "#/definitions/ExcludedClassName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Code Redaction
      summary: "Remove a class from exclusion"
      description: "Remove a class from the exclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages:
    get:
      tags: 
        - Code Redaction
      summary: "List all excluded packages"
      description: "List all excluded packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of excluded packages
          schema:
            properties: 
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/ExcludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/exclude/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        type: string
        required: true
        description: Fully qualified Java package name
    get:
      tags: 
        - Code Redaction
      summary: "Retrieve an excluded package"
      description: "Retrieve an excluded package"
      responses:
        200:
          description: An excluded package
          schema:
            properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Code Redaction
      summary: "Add a package to the exclusion list"
      description: "Add a package to the exclusion list. The body package name must match the resource identifier"
      parameters: 
       - in: body
         name: package
         schema:
           properties:
              name:
                $ref: "#/definitions/ExcludedPackageName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Code Redaction
      summary: "Remove a package from the exclusion list"
      description: "Remove a package from the exclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include:
    get:
      tags: 
        - Code Redaction
      summary: "List all code inclusions"
      description: "List all code inclusions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes and packages
          schema:
            properties: 
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedClassName"
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes:
    get:
      tags: 
        - Code Redaction
      summary: "List all included classes"
      description: "List all included classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included classes
          schema:
            properties: 
              classes:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedClassName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        type: string
        required: true
        description: Fully qualified Java class name
    get:
      tags: 
        - Code Redaction
      summary: "Retrieve an included class"
      description: "Retrieve an included class"
      responses:
        200:
          description: An included class
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedClassName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Code Redaction
      summary: "Add a class to the inclusion list"
      description: "Add a class to the inclusion list. The body class name must match the resource identifier"
      parameters: 
       - in: body
         name: class
         schema:
           properties:
              name:
                $ref: "#/definitions/IncludedClassName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Code Redaction
      summary: "Remove a class from the inclusion list"
      description: "Remove a class from the inclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages:
    get:
      tags: 
        - Code Redaction
      summary: "List all included packages"
      description: "List all included packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of included packages
          schema:
            properties: 
              packages:
                type: "array"
                items:
                  $ref: "#/definitions/IncludedPackageName"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/code-redaction/include/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        type: string
        required: true
        description: Fully qualified Java package name
    get:
      tags: 
        - Code Redaction
      summary: "Retrieve an included package"
      description: "Retrieve an included package"
      responses:
        200:
          description: An included package
          schema:
            properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Code Redaction
      summary: "Add a package to the inclusion list"
      description: "Add a package to the inclusion list. The body package name must match the resource identifier"
      parameters: 
       - in: body
         name: package
         schema:
           properties:
              name:
                $ref: "#/definitions/IncludedPackageName"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Code Redaction
      summary: "Remove a package from the inclusion list"
      description: "Remove a package from the inclusion list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction:
    get:
      tags: 
        - Data Redaction
      summary: "List all data redactions"
      description: "List all data redactions"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of data redaction
          schema:
            properties: 
              packages: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "com.example"
              patterns: 
                type: "array"
                items: 
                  $ref: "#/definitions/Pattern"
              identifiers: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "password"
              classes: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns:
    get:
      tags: 
        - Data Redaction
      summary: "List all regex patterns"
      description: "List all regex patterns"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of regex patterns
          schema:
            properties: 
              patterns: 
                type: "array"
                items: 
                  $ref: "#/definitions/Pattern"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/patterns/{pattern}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: pattern
        description: A RegEx pattern name
        type: string
        required: true
    get:
      tags: 
        - Data Redaction
      summary: "Retrieve a pattern"
      description: "Retrieve a pattern"
      responses:
        200:
          description: A pattern
          schema:
            $ref: '#/definitions/Pattern'
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Data Redaction
      summary: "Create a pattern"
      description: "Add a RegEx pattern to be redacted. The pattern name must match the resource identifier"
      parameters: 
        - in: body
          name: pattern
          schema:
            $ref: '#/definitions/Pattern'
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Data Redaction
      summary: "Delete a pattern"
      description: "Removes a pattern from the redaction list"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers:
    get:
      tags: 
        - Data Redaction
      summary: "List all identifiers"
      description: "List all identifiers"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of identifiers
          schema:
            properties: 
              identifiers: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "password"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/identifiers/{identifier}:
    get:
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
      tags: 
        - Data Redaction
      summary: "Retrieve an identifier"
      description: "Retrieve an identifier"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties: 
              name: 
                type: "string"
                example: "password"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Data Redaction
      summary: "Add an identifier"
      description: "Add an identifier. The body identifier name must match the resource identifier"
      operationId: addIdentifier
      parameters: 
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
        - in: path
          name: identifier
          description: A code identifier
          type: string
          required: true
        - name: name
          in: body
          description: Identifier object
          schema:
           properties: 
             name: 
               type: "string"
               example: "password"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Data Redaction
      summary:  "Delete identifier"
      description: "Delete identifier"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes:
    get:
      tags: 
        - Data Redaction
      summary: "List all classes"
      description: "List all classes"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of classes
          schema:
            properties: 
              classes: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/classes/{class_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: class_name
        description: Class name to redact.
        type: string
        required: true
    get:
      tags: 
        - Data Redaction
      summary: "Retrieve a class"
      description: "Retrieve a class from the data redaction list"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties: 
              name: 
                type: "string"
                example: "IPv4"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Data Redaction
      summary: "Add a class for data redaction"
      description: "Add a class to the redaction list. The body class name must match the resource identifier"
      parameters: 
       - in: body
         description: A JSON representing a class to add for redaction
         name: name
         schema:
          properties: 
            name: 
              type: "string"
              example: "IPv4"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Data Redaction
      summary:  "Delete a class"
      description: "Delete a class"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages:
    get:
      tags: 
        - Data Redaction
      summary: "List all packages"
      description: "List all packages"
      parameters:
        - in: path
          name: service_id
          description: Environment to use
          type: string
          required: true
      responses:
        200:
          description: List of packages
          schema:
            properties: 
              packages: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    name: 
                      type: "string"
                      example: "com.example"
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/settings/data-redaction/packages/{package_name}:
    parameters:
      - in: path
        name: service_id
        description: Environment to use
        type: string
        required: true
      - in: path
        name: package_name
        description: Fully qualified Java package name
        type: string
        required: true
    get:
      tags: 
        - Data Redaction
      summary: "Retrieve a package"
      description: "Retrieve a package"
      responses:
        200:
          description: If the redaction exists
          schema:
            properties: 
              name: 
                type: "string"
                example: "com.example"
        401:
          $ref: "#/definitions/UnauthorizedError"
    put:
      tags: 
        - Data Redaction
      summary: "Create a package"
      description: "Create a package. The body package name must match the resource identifier"
      parameters: 
       - in: body
         name: name
         schema:
          properties: 
            name: 
              type: "string"
              example: "com.example"
      responses:
        200:
          description: OK
        400:
          description: BAD INPUT
        401:
          $ref: "#/definitions/UnauthorizedError"
    delete:
      tags: 
        - Data Redaction
      summary: "Delete package"
      description: "Delete package"
      responses:
        200:
          description: OK
        404:
          description: NOT FOUND
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/views:
    get:
      tags:
        - Views
      summary: "List views"
      description: "List views"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: query
            name: name
            description: Name of view(s) to fetch
            type: string
      responses:
        200:
          description: List of views
          schema:
            properties: 
              views: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    id: 
                      type: "string"
                      example: P12
                    name: 
                      type: "string"
                      example: DB Errors
                    shared:
                      type: boolean
                      example: false
        401:
          $ref: "#/definitions/UnauthorizedError"
  /services/{service_id}/views/{view_id}/metrics/view/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch error metrics"
      description: "Fetch error metrics"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: from
            type: string
            description: Start time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
            required: true
          - in: query
            name: to
            type: integer
            description: End time of requested graph. Date in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ)
            required: true
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
            required: true
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: Error metrics
          schema:
            properties: 
              graphs: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    type: 
                      type: "string"
                      example: "event"
                    id: 
                      type: "string"
                      example: "42"
                    points: 
                      type: "array"
                      items: 
                        type: "object"
                        properties: 
                          time: 
                            type: "string"
                            example: "2018-02-28T22:47:09.038+02:00"
                          value: 
                            type: "number"
                            example: 42
                          contributors: 
                            type: "array"
                            items: 
                              type: "object"
                              properties: 
                                id: 
                                  type: "string"
                                  example: "42"
                                value: 
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/entrypoint/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch error metrics split by entrypoint"
      description: "Fetch error metrics split by entrypoint"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: start_date
            type: integer
            description: An epoch timestamp, in seconds
          - in: query
            name: end_date
            type: integer
            description: An epoch timestamp, in seconds
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: Error metrics split by entry point
          schema:
            properties: 
              graphs: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    type: 
                      type: "string"
                      example: "event"
                    id: 
                      type: "string"
                      example: "42"
                    points: 
                      type: "array"
                      items: 
                        type: "object"
                        properties: 
                          time: 
                            type: "string"
                            example: "2018-02-28T22:47:09.038+02:00"
                          value: 
                            type: "number"
                            example: 42
                          contributors: 
                            type: "array"
                            items: 
                              type: "object"
                              properties: 
                                id: 
                                  type: "string"
                                  example: "42"
                                value: 
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/views/{view_id}/metrics/event/graph:
    get:
      tags:
        - View Metrics
      summary: "Fetch error metrics split by event"
      description: "Fetch error metrics split by event"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: query
            name: start_date
            type: integer
            description: An epoch timestamp, in seconds
          - in: query
            name: end_date
            type: integer
            description: An epoch timestamp, in seconds
          - in: query
            name: points
            type: integer
            description: Number of data points to return within the interval
          - in: query
            name: server
            type: string
            description: Server(s) added to the filter
          - in: query
            name: app
            type: string
            description: Application(s) added to the filter
          - in: query
            name: deployment
            type: string
            description: Deployment(s) added to the filter
      responses:
        200:
          description: Error metrics split by event
          schema:
            properties: 
              graphs: 
                type: "array"
                items: 
                  type: "object"
                  properties: 
                    type: 
                      type: "string"
                      example: "event"
                    id: 
                      type: "string"
                      example: "42"
                    points: 
                      type: "array"
                      items: 
                        type: "object"
                        properties: 
                          time: 
                            type: "string"
                            example: "2018-02-28T22:47:09.038+02:00"
                          value: 
                            type: "number"
                            example: 42
                          contributors: 
                            type: "array"
                            items: 
                              type: "object"
                              properties: 
                                id: 
                                  type: "string"
                                  example: "42"
                                value: 
                                  type: "number"
                                  example: 42
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/alerts/{view_id}/anomaly:
    post:
      tags:
        - Alerts
      summary: "Alert on anomalies"
      description: "Alert on anomalies"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: view_id
            description: View to use
            type: string
            required: true
          - in: body
            name: anomaly
            description: "the anomaly object"
            schema:
              type: "object"
              properties: 
                desc: 
                  type: "string"
                  example: "Description"
                timeframe: 
                  type: "object"
                  properties: 
                    from: 
                      type: "string"
                      example: "2018-02-28T22:47:09.038+02:00"
                    to: 
                      type: "string"
                      example: "2018-03-01T22:47:09.038+02:00"
                    name: 
                      type: "string"
                      example: "Last day"
                anomaly: 
                  type: "object"
                  properties: 
                    periods: 
                      type: "array"
                      items: 
                        type: "object"
                        properties: 
                          id: 
                            type: "string"
                            example: "1"
                          from: 
                            type: "string"
                            example: "2018-03-01T23:10:00.000+02:00"
                          to: 
                            type: "string"
                            example: "2018-03-01T24:10:00.000+02:00"
                    contributors: 
                      type: "array"
                      items: 
                        type: "object"
                        properties: 
                          id: 
                            type: "number"
                            example: 1
                          value: 
                            type: "number"
                            example: 42
      responses:
        200:
          OK
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"
  /services/{service_id}/events/{event_id}:
    get:
      tags:
        - Events
      summary: "Fetch event data"
      description: "Fetch event data"
      parameters:
          - in: path
            name: service_id
            description: Environment to use
            type: string
            required: true
          - in: path
            name: event_id
            description: Event to use
            type: string
            required: true
      responses:
        200:
          description: Event data
          schema:
            $ref: "#/definitions/Event"
        401:
          $ref: "#/definitions/UnauthorizedError"
        404:
          $ref: "#/definitions/NotFoundError"            
definitions:
  UnauthorizedError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 401
      type:
        type: string
        example: Unauthorized
      message:
        type: string
        example: Not authorized to perform action
  NotFoundError:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 404
      type:
        type: string
        example: Resource Not Found
      message:
        type: string
        example: Resource Not Found
  Pattern:
    description: A data redaction pattern used to define PII RegEx
    type: object
    properties:
      name: 
        type: "string"
        example: "Visa"
      category: 
        type: "string"
        example: "Credit Card"
      regex: 
        type: "string"
        example: "\\b4\\d{3}([\\-\\ ]?)(?:\\d{4}\\1){2}\\d(?:\\d{3})?\\b"
      is_active: 
        type: "boolean"
        example: true
  IncludedClassName:
    type: string
    example: "com.company.GoodClassName"
  IncludedPackageName:
    type: string
    example: "com.company.package.good"
  ExcludedClassName:
    type: string
    example: "com.company.BadClassName"
  ExcludedPackageName:
    type: string
    example: "com.company.package.bad"
  Event:
    description: An exception, logged error and more
    type: object
    properties:
      id: 
        type: "string"
        example: "1"
      summary: 
        type: "string"
        example: "NullPointerException in Main.main"
      type: 
        type: "string"
        example: "NullPointerException"
      first_seen: 
        type: "string"
        example: "2018-02-28T22:47:09.038+02:00"
      introduced_by:
        type: "string"
        example: "1.201.1"
      labels:
        type: "array"
        items: 
          type: "string"
          example: "Critical"
      similar_event_ids:
        type: "array"
        items: 
          type: "string"
          example: "K2"
      error_location:
        $ref: "#/definitions/CodeLocation"
      entry_point:
        $ref: "#/definitions/CodeLocation"
  CodeLocation:
    description: A code location, for error location, etc
    type: object
    properties:
      prettified_name: 
        type: "string"
        example: "Main.main"
      class_name:
        type: "string"
        example: "com.company.Main"
      method_name:
        type: "string"
        example: "main"
      method_desc:
        type: "string"
        example: "([Ljava/lang/String;)V"
